// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/registry/service_discovery/v1/models.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Zone with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Zone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Zone with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ZoneMultiError, or nil if none found.
func (m *Zone) ValidateAll() error {
	return m.validate(true)
}

func (m *Zone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ZoneMultiError(errors)
	}

	return nil
}

// ZoneMultiError is an error wrapping multiple validation errors returned by
// Zone.ValidateAll() if the designated constraints aren't met.
type ZoneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ZoneMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ZoneMultiError) AllErrors() []error { return m }

// ZoneValidationError is the validation error returned by Zone.Validate if the
// designated constraints aren't met.
type ZoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ZoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ZoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ZoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ZoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ZoneValidationError) ErrorName() string { return "ZoneValidationError" }

// Error satisfies the builtin error interface
func (e ZoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sZone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ZoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ZoneValidationError{}

// Validate checks the field values on ProcessIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProcessIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessIdentityMultiError, or nil if none found.
func (m *ProcessIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	// no validation rules for RegistryAddress

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessIdentityValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessIdentityValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessIdentityValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessIdentityMultiError(errors)
	}

	return nil
}

// ProcessIdentityMultiError is an error wrapping multiple validation errors
// returned by ProcessIdentity.ValidateAll() if the designated constraints
// aren't met.
type ProcessIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessIdentityMultiError) AllErrors() []error { return m }

// ProcessIdentityValidationError is the validation error returned by
// ProcessIdentity.Validate if the designated constraints aren't met.
type ProcessIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessIdentityValidationError) ErrorName() string { return "ProcessIdentityValidationError" }

// Error satisfies the builtin error interface
func (e ProcessIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessIdentityValidationError{}

// Validate checks the field values on StartupConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartupConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartupConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartupConfigurationMultiError, or nil if none found.
func (m *StartupConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *StartupConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssignedPort

	if len(errors) > 0 {
		return StartupConfigurationMultiError(errors)
	}

	return nil
}

// StartupConfigurationMultiError is an error wrapping multiple validation
// errors returned by StartupConfiguration.ValidateAll() if the designated
// constraints aren't met.
type StartupConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartupConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartupConfigurationMultiError) AllErrors() []error { return m }

// StartupConfigurationValidationError is the validation error returned by
// StartupConfiguration.Validate if the designated constraints aren't met.
type StartupConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartupConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartupConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartupConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartupConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartupConfigurationValidationError) ErrorName() string {
	return "StartupConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e StartupConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartupConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartupConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartupConfigurationValidationError{}

// Validate checks the field values on Process with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Process) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Process with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProcessMultiError, or nil if none found.
func (m *Process) ValidateAll() error {
	return m.validate(true)
}

func (m *Process) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	// no validation rules for Name

	// no validation rules for Group

	// no validation rules for Local

	// no validation rules for IpAddress

	// no validation rules for ProcessKind

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProcessValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProcessValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProcessValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJoinedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "JoinedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "JoinedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessValidationError{
				field:  "JoinedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLeftTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "LeftTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "LeftTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeftTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessValidationError{
				field:  "LeftTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastStatusTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "LastStatusTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "LastStatusTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastStatusTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessValidationError{
				field:  "LastStatusTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RunningState

	// no validation rules for HealthState

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessMultiError(errors)
	}

	return nil
}

// ProcessMultiError is an error wrapping multiple validation errors returned
// by Process.ValidateAll() if the designated constraints aren't met.
type ProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessMultiError) AllErrors() []error { return m }

// ProcessValidationError is the validation error returned by Process.Validate
// if the designated constraints aren't met.
type ProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessValidationError) ErrorName() string { return "ProcessValidationError" }

// Error satisfies the builtin error interface
func (e ProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on GeoPoint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GeoPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeoPoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GeoPointMultiError, or nil
// if none found.
func (m *GeoPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *GeoPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lat

	// no validation rules for Lng

	if len(errors) > 0 {
		return GeoPointMultiError(errors)
	}

	return nil
}

// GeoPointMultiError is an error wrapping multiple validation errors returned
// by GeoPoint.ValidateAll() if the designated constraints aren't met.
type GeoPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeoPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeoPointMultiError) AllErrors() []error { return m }

// GeoPointValidationError is the validation error returned by
// GeoPoint.Validate if the designated constraints aren't met.
type GeoPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeoPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeoPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeoPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeoPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeoPointValidationError) ErrorName() string { return "GeoPointValidationError" }

// Error satisfies the builtin error interface
func (e GeoPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeoPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeoPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeoPointValidationError{}

// Validate checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TokenMultiError, or nil if none found.
func (m *Token) ValidateAll() error {
	return m.validate(true)
}

func (m *Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Jwt

	if len(errors) > 0 {
		return TokenMultiError(errors)
	}

	return nil
}

// TokenMultiError is an error wrapping multiple validation errors returned by
// Token.ValidateAll() if the designated constraints aren't met.
type TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenMultiError) AllErrors() []error { return m }

// TokenValidationError is the validation error returned by Token.Validate if
// the designated constraints aren't met.
type TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenValidationError) ErrorName() string { return "TokenValidationError" }

// Error satisfies the builtin error interface
func (e TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenValidationError{}
