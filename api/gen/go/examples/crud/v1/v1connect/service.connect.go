// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: examples/crud/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/steady-bytes/draft/api/examples/crud/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CrudServiceName is the fully-qualified name of the CrudService service.
	CrudServiceName = "examples.crud.v1.CrudService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CrudServiceCreateProcedure is the fully-qualified name of the CrudService's Create RPC.
	CrudServiceCreateProcedure = "/examples.crud.v1.CrudService/Create"
	// CrudServiceReadProcedure is the fully-qualified name of the CrudService's Read RPC.
	CrudServiceReadProcedure = "/examples.crud.v1.CrudService/Read"
	// CrudServiceUpdateProcedure is the fully-qualified name of the CrudService's Update RPC.
	CrudServiceUpdateProcedure = "/examples.crud.v1.CrudService/Update"
	// CrudServiceDeleteProcedure is the fully-qualified name of the CrudService's Delete RPC.
	CrudServiceDeleteProcedure = "/examples.crud.v1.CrudService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	crudServiceServiceDescriptor      = v1.File_examples_crud_v1_service_proto.Services().ByName("CrudService")
	crudServiceCreateMethodDescriptor = crudServiceServiceDescriptor.Methods().ByName("Create")
	crudServiceReadMethodDescriptor   = crudServiceServiceDescriptor.Methods().ByName("Read")
	crudServiceUpdateMethodDescriptor = crudServiceServiceDescriptor.Methods().ByName("Update")
	crudServiceDeleteMethodDescriptor = crudServiceServiceDescriptor.Methods().ByName("Delete")
)

// CrudServiceClient is a client for the examples.crud.v1.CrudService service.
type CrudServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewCrudServiceClient constructs a client for the examples.crud.v1.CrudService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCrudServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CrudServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &crudServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+CrudServiceCreateProcedure,
			connect.WithSchema(crudServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		read: connect.NewClient[v1.ReadRequest, v1.ReadResponse](
			httpClient,
			baseURL+CrudServiceReadProcedure,
			connect.WithSchema(crudServiceReadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+CrudServiceUpdateProcedure,
			connect.WithSchema(crudServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CrudServiceDeleteProcedure,
			connect.WithSchema(crudServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// crudServiceClient implements CrudServiceClient.
type crudServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	read   *connect.Client[v1.ReadRequest, v1.ReadResponse]
	update *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Create calls examples.crud.v1.CrudService.Create.
func (c *crudServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Read calls examples.crud.v1.CrudService.Read.
func (c *crudServiceClient) Read(ctx context.Context, req *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// Update calls examples.crud.v1.CrudService.Update.
func (c *crudServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls examples.crud.v1.CrudService.Delete.
func (c *crudServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// CrudServiceHandler is an implementation of the examples.crud.v1.CrudService service.
type CrudServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewCrudServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCrudServiceHandler(svc CrudServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	crudServiceCreateHandler := connect.NewUnaryHandler(
		CrudServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(crudServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	crudServiceReadHandler := connect.NewUnaryHandler(
		CrudServiceReadProcedure,
		svc.Read,
		connect.WithSchema(crudServiceReadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	crudServiceUpdateHandler := connect.NewUnaryHandler(
		CrudServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(crudServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	crudServiceDeleteHandler := connect.NewUnaryHandler(
		CrudServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(crudServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/examples.crud.v1.CrudService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CrudServiceCreateProcedure:
			crudServiceCreateHandler.ServeHTTP(w, r)
		case CrudServiceReadProcedure:
			crudServiceReadHandler.ServeHTTP(w, r)
		case CrudServiceUpdateProcedure:
			crudServiceUpdateHandler.ServeHTTP(w, r)
		case CrudServiceDeleteProcedure:
			crudServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCrudServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCrudServiceHandler struct{}

func (UnimplementedCrudServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("examples.crud.v1.CrudService.Create is not implemented"))
}

func (UnimplementedCrudServiceHandler) Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("examples.crud.v1.CrudService.Read is not implemented"))
}

func (UnimplementedCrudServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("examples.crud.v1.CrudService.Update is not implemented"))
}

func (UnimplementedCrudServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("examples.crud.v1.CrudService.Delete is not implemented"))
}
