// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file examples/echo/v1/service.proto (package examples.echo.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message examples.echo.v1.SpeakRequest
 */
export class SpeakRequest extends Message<SpeakRequest> {
  /**
   * @generated from field: string input = 1;
   */
  input = "";

  constructor(data?: PartialMessage<SpeakRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "examples.echo.v1.SpeakRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeakRequest {
    return new SpeakRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeakRequest {
    return new SpeakRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeakRequest {
    return new SpeakRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpeakRequest | PlainMessage<SpeakRequest> | undefined, b: SpeakRequest | PlainMessage<SpeakRequest> | undefined): boolean {
    return proto3.util.equals(SpeakRequest, a, b);
  }
}

/**
 * @generated from message examples.echo.v1.SpeakResponse
 */
export class SpeakResponse extends Message<SpeakResponse> {
  /**
   * @generated from field: string output = 2;
   */
  output = "";

  constructor(data?: PartialMessage<SpeakResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "examples.echo.v1.SpeakResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeakResponse {
    return new SpeakResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeakResponse {
    return new SpeakResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeakResponse {
    return new SpeakResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpeakResponse | PlainMessage<SpeakResponse> | undefined, b: SpeakResponse | PlainMessage<SpeakResponse> | undefined): boolean {
    return proto3.util.equals(SpeakResponse, a, b);
  }
}

