// @generated by protoc-gen-connect-query v1.1.3 with parameter "target=js"
// @generated from file core/registry/service_discovery/v1/service.proto (package core.registry.service_discovery.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { FinalizeRequest, FinalizeResponse, InitializeRequest, InitializeResponse, QueryRequest, QueryResponse, ReportHealthRequest, ReportHealthResponse } from "./service_pb.js";

/**
 * Initialize the registeration of the process to the registry
 *
 * @generated from rpc core.registry.service_discovery.v1.ServiceDiscoveryService.Initialize
 */
export const initialize = {
  localName: "initialize",
  name: "Initialize",
  kind: MethodKind.Unary,
  I: InitializeRequest,
  O: InitializeResponse,
  service: {
    typeName: "core.registry.service_discovery.v1.ServiceDiscoveryService"
  }
};

/**
 * Gracefully shutdown and `Finalize` the connection of the process to the registry
 *
 * @generated from rpc core.registry.service_discovery.v1.ServiceDiscoveryService.Finalize
 */
export const finalize = {
  localName: "finalize",
  name: "Finalize",
  kind: MethodKind.Unary,
  I: FinalizeRequest,
  O: FinalizeResponse,
  service: {
    typeName: "core.registry.service_discovery.v1.ServiceDiscoveryService"
  }
};

/**
 * Let a follower draft node report health information on the processes it's responsible for checking the health status of
 *
 * @generated from rpc core.registry.service_discovery.v1.ServiceDiscoveryService.ReportHealth
 */
export const reportHealth = {
  localName: "reportHealth",
  name: "ReportHealth",
  kind: MethodKind.Unary,
  I: ReportHealthRequest,
  O: ReportHealthResponse,
  service: {
    typeName: "core.registry.service_discovery.v1.ServiceDiscoveryService"
  }
};

/**
 * Query the registry
 *
 * @generated from rpc core.registry.service_discovery.v1.ServiceDiscoveryService.Query
 */
export const query = {
  localName: "query",
  name: "Query",
  kind: MethodKind.Unary,
  I: QueryRequest,
  O: QueryResponse,
  service: {
    typeName: "core.registry.service_discovery.v1.ServiceDiscoveryService"
  }
};
