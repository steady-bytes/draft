// @generated by protoc-gen-connect-es v1.3.0 with parameter "target=js"
// @generated from file core/registry/key_value/v1/service.proto (package core.registry.key_value.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DeleteRequest, DeleteResponse, GetRequest, GetResponse, ListRequest, ListResponse, SetRequest, SetResponse } from "./service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service core.registry.key_value.v1.KeyValueService
 */
export const KeyValueService = {
  typeName: "core.registry.key_value.v1.KeyValueService",
  methods: {
    /**
     * SET - A key/val pair
     *
     * @generated from rpc core.registry.key_value.v1.KeyValueService.Set
     */
    set: {
      name: "Set",
      I: SetRequest,
      O: SetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GET - A key/val pair
     *
     * @generated from rpc core.registry.key_value.v1.KeyValueService.Get
     */
    get: {
      name: "Get",
      I: GetRequest,
      O: GetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DELETE - remove a key, and it's associated value
     *
     * @generated from rpc core.registry.key_value.v1.KeyValueService.Delete
     */
    delete: {
      name: "Delete",
      I: DeleteRequest,
      O: DeleteResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List accepts a type to search the key_value store for all keys
     * matching that type, if any are found they will all be returned
     * as a map.
     *
     * @generated from rpc core.registry.key_value.v1.KeyValueService.List
     */
    list: {
      name: "List",
      I: ListRequest,
      O: ListResponse,
      kind: MethodKind.Unary,
    },
  }
};

