// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: core/control_plane/networking/v1/service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddRouteResponseCode int32

const (
	AddRouteResponseCode_INVALID_ADD_ROUTE_RESPONSE_CODE AddRouteResponseCode = 0
	AddRouteResponseCode_OK                              AddRouteResponseCode = 1
	AddRouteResponseCode_ERROR                           AddRouteResponseCode = 2
	AddRouteResponseCode_INVALID_REQUEST                 AddRouteResponseCode = 3
)

// Enum value maps for AddRouteResponseCode.
var (
	AddRouteResponseCode_name = map[int32]string{
		0: "INVALID_ADD_ROUTE_RESPONSE_CODE",
		1: "OK",
		2: "ERROR",
		3: "INVALID_REQUEST",
	}
	AddRouteResponseCode_value = map[string]int32{
		"INVALID_ADD_ROUTE_RESPONSE_CODE": 0,
		"OK":                              1,
		"ERROR":                           2,
		"INVALID_REQUEST":                 3,
	}
)

func (x AddRouteResponseCode) Enum() *AddRouteResponseCode {
	p := new(AddRouteResponseCode)
	*p = x
	return p
}

func (x AddRouteResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddRouteResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_core_control_plane_networking_v1_service_proto_enumTypes[0].Descriptor()
}

func (AddRouteResponseCode) Type() protoreflect.EnumType {
	return &file_core_control_plane_networking_v1_service_proto_enumTypes[0]
}

func (x AddRouteResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddRouteResponseCode.Descriptor instead.
func (AddRouteResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{0}
}

type DeleteRouteCode int32

const (
	DeleteRouteCode_INVALID_DELETE_ROUTE_RESPONSE_CODE DeleteRouteCode = 0
	DeleteRouteCode_DELETE_ROUTE_OK                    DeleteRouteCode = 1
	DeleteRouteCode_DELETE_ROUTE_ERROR                 DeleteRouteCode = 2
)

// Enum value maps for DeleteRouteCode.
var (
	DeleteRouteCode_name = map[int32]string{
		0: "INVALID_DELETE_ROUTE_RESPONSE_CODE",
		1: "DELETE_ROUTE_OK",
		2: "DELETE_ROUTE_ERROR",
	}
	DeleteRouteCode_value = map[string]int32{
		"INVALID_DELETE_ROUTE_RESPONSE_CODE": 0,
		"DELETE_ROUTE_OK":                    1,
		"DELETE_ROUTE_ERROR":                 2,
	}
)

func (x DeleteRouteCode) Enum() *DeleteRouteCode {
	p := new(DeleteRouteCode)
	*p = x
	return p
}

func (x DeleteRouteCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteRouteCode) Descriptor() protoreflect.EnumDescriptor {
	return file_core_control_plane_networking_v1_service_proto_enumTypes[1].Descriptor()
}

func (DeleteRouteCode) Type() protoreflect.EnumType {
	return &file_core_control_plane_networking_v1_service_proto_enumTypes[1]
}

func (x DeleteRouteCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteRouteCode.Descriptor instead.
func (DeleteRouteCode) EnumDescriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{1}
}

// AddRouteRequest - Add a route to the networking configuration
type AddRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// should this be the route type from envoy config. So that I can use the same proto
	// or should I make an internal proto and convert them back and forth
	// An advantage of using the envoy `Route` proto is that it's already ubuqitous in the
	// wild. A disadvantage is that it's a bit more complex than what I need.
	Route *Route `protobuf:"bytes,1,opt,name=route,proto3" json:"route" pg:"route" bun:"route" yaml:"route" csv:"route"`
}

func (x *AddRouteRequest) Reset() {
	*x = AddRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRouteRequest) ProtoMessage() {}

func (x *AddRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRouteRequest.ProtoReflect.Descriptor instead.
func (*AddRouteRequest) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

// AddRouteResponse - Response to adding a route to the networking configuration. Just because a message
// was received doesn't mean it was successful. The `code` field is used to determine the success of the
// route entry.
type AddRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code AddRouteResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=core.control_plane.networking.v1.AddRouteResponseCode" json:"code" pg:"code" bun:"code" yaml:"code" csv:"code"`
}

func (x *AddRouteResponse) Reset() {
	*x = AddRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRouteResponse) ProtoMessage() {}

func (x *AddRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRouteResponse.ProtoReflect.Descriptor instead.
func (*AddRouteResponse) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *AddRouteResponse) GetCode() AddRouteResponseCode {
	if x != nil {
		return x.Code
	}
	return AddRouteResponseCode_INVALID_ADD_ROUTE_RESPONSE_CODE
}

type ListRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRoutesRequest) Reset() {
	*x = ListRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesRequest) ProtoMessage() {}

func (x *ListRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{2}
}

type ListRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes" bun:"routes" yaml:"routes" csv:"routes" pg:"routes"`
}

func (x *ListRoutesResponse) Reset() {
	*x = ListRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesResponse) ProtoMessage() {}

func (x *ListRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListRoutesResponse) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type DeleteRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// route names must be unique making name the primary identifier of a route
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" pg:"name" bun:"name" yaml:"name" csv:"name"`
}

func (x *DeleteRouteRequest) Reset() {
	*x = DeleteRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRequest) ProtoMessage() {}

func (x *DeleteRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteRequest) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code DeleteRouteCode `protobuf:"varint,1,opt,name=code,proto3,enum=core.control_plane.networking.v1.DeleteRouteCode" json:"code" csv:"code" pg:"code" bun:"code" yaml:"code"`
}

func (x *DeleteRouteResponse) Reset() {
	*x = DeleteRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteResponse) ProtoMessage() {}

func (x *DeleteRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteResponse.ProtoReflect.Descriptor instead.
func (*DeleteRouteResponse) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRouteResponse) GetCode() DeleteRouteCode {
	if x != nil {
		return x.Code
	}
	return DeleteRouteCode_INVALID_DELETE_ROUTE_RESPONSE_CODE
}

// Route - Close match to the `Route` proto in envoy. Anything that can't be inferred by the draft
// framework needs to be added by the `process` adding the route configuration.
//
// The process will register individual routes, while cluster and virtual host configuration will be handled by the framework.
// current integration is `process` -> `fuse` -> `envoy`
type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name for the route
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" pg:"name" bun:"name" yaml:"name" csv:"name"`
	// Route matching parameters.
	Match    *RouteMatch `protobuf:"bytes,2,opt,name=match,proto3" json:"match" pg:"match" bun:"match" yaml:"match" csv:"match"`
	Endpoint *Endpoint   `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint" pg:"endpoint" bun:"endpoint" yaml:"endpoint" csv:"endpoint"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Route) GetMatch() *RouteMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Route) GetEndpoint() *Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host" csv:"host" pg:"host" bun:"host" yaml:"host"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port" pg:"port" bun:"port" yaml:"port" csv:"port"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *Endpoint) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Endpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// parameters for matching a route
type RouteMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domains for the url a configured in `fuse` but the path to be matched of a route is configured by the `process`
	// (ie. api.draft.com/health -> /health)
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix" pg:"prefix" bun:"prefix" yaml:"prefix" csv:"prefix"`
	// option to match headers of a request
	// TODO -> implement pre 1.0 relase of `fuse`
	Headers *HeaderMatchOptions `protobuf:"bytes,2,opt,name=headers,proto3,oneof" json:"headers" bun:"headers" yaml:"headers" csv:"headers" pg:"headers"`
	// options to simplify the matching of a route for grpc. Most request will be grpc and this configuration
	// makes that integration easier.
	// TODO -> implement pre 1.0 relase of `fuse`
	GrpcMatchOptions *GrpcMatchOptions `protobuf:"bytes,3,opt,name=grpc_match_options,json=grpcMatchOptions,proto3,oneof" json:"grpc_match_options" pg:"grpc_match_options" bun:"grpc_match_options" yaml:"grpc_match_options" csv:"grpc_match_options"`
	// REF: Envoy
	// Specifies a set of dynamic metadata that a route must match.
	// The router will check the dynamic metadata against all the specified dynamic metadata matchers.
	// If the number of specified dynamic metadata matchers is nonzero, they all must match the
	// dynamic metadata for a match to occur.
	// TODO -> implement pre 2.0 relase of `fuse`
	DynamicMetadata *DynamicMetadata `protobuf:"bytes,4,opt,name=dynamic_metadata,json=dynamicMetadata,proto3,oneof" json:"dynamic_metadata" pg:"dynamic_metadata" bun:"dynamic_metadata" yaml:"dynamic_metadata" csv:"dynamic_metadata"`
	// Host address for the route
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host" pg:"host" bun:"host" yaml:"host" csv:"host"`
}

func (x *RouteMatch) Reset() {
	*x = RouteMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatch) ProtoMessage() {}

func (x *RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatch.ProtoReflect.Descriptor instead.
func (*RouteMatch) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *RouteMatch) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *RouteMatch) GetHeaders() *HeaderMatchOptions {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RouteMatch) GetGrpcMatchOptions() *GrpcMatchOptions {
	if x != nil {
		return x.GrpcMatchOptions
	}
	return nil
}

func (x *RouteMatch) GetDynamicMetadata() *DynamicMetadata {
	if x != nil {
		return x.DynamicMetadata
	}
	return nil
}

func (x *RouteMatch) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// consider using the `key/value` from `blueprint` key/value store
// TODO -> implement pre 1.0 relase of `fuse`
type HeaderMatchOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key" bun:"key" yaml:"key" csv:"key" pg:"key"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" yaml:"value" csv:"value" pg:"value" bun:"value"`
}

func (x *HeaderMatchOptions) Reset() {
	*x = HeaderMatchOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderMatchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderMatchOptions) ProtoMessage() {}

func (x *HeaderMatchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderMatchOptions.ProtoReflect.Descriptor instead.
func (*HeaderMatchOptions) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *HeaderMatchOptions) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HeaderMatchOptions) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// GrpcMatchOptions - Options to simplify the matching of a route for grpc. Most request will be grpc and this configuration
// should make the integration easier.
// TODO -> implement pre 1.0 relase of `fuse`
type GrpcMatchOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GrpcMatchOptions) Reset() {
	*x = GrpcMatchOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcMatchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcMatchOptions) ProtoMessage() {}

func (x *GrpcMatchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcMatchOptions.ProtoReflect.Descriptor instead.
func (*GrpcMatchOptions) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{10}
}

// DynamicMetadata - Specifies a set of dynamic metadata that a route must match. Dynamic metadata can be used in a variety of ways
// and is a powerful feature of envoy `fuse` will most likely use this feature to add additional information to the route.
// TODO -> implement pre 2.0 relase of `fuse`
type DynamicMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DynamicMetadata) Reset() {
	*x = DynamicMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicMetadata) ProtoMessage() {}

func (x *DynamicMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_core_control_plane_networking_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicMetadata.ProtoReflect.Descriptor instead.
func (*DynamicMetadata) Descriptor() ([]byte, []int) {
	return file_core_control_plane_networking_v1_service_proto_rawDescGZIP(), []int{11}
}

var File_core_control_plane_networking_v1_service_proto protoreflect.FileDescriptor

var file_core_control_plane_networking_v1_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x20, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x22, 0x50, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x28, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x32, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x8f, 0x03, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x53, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x65, 0x0a, 0x12, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x01, 0x52, 0x10, 0x67, 0x72, 0x70, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x10, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x72, 0x70, 0x63, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x63, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x03, 0x2a, 0x66, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f, 0x4b,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x32, 0x81, 0x03, 0x0a, 0x11, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x73, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x44,
	0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x65,
	0x61, 0x64, 0x79, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_control_plane_networking_v1_service_proto_rawDescOnce sync.Once
	file_core_control_plane_networking_v1_service_proto_rawDescData = file_core_control_plane_networking_v1_service_proto_rawDesc
)

func file_core_control_plane_networking_v1_service_proto_rawDescGZIP() []byte {
	file_core_control_plane_networking_v1_service_proto_rawDescOnce.Do(func() {
		file_core_control_plane_networking_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_control_plane_networking_v1_service_proto_rawDescData)
	})
	return file_core_control_plane_networking_v1_service_proto_rawDescData
}

var file_core_control_plane_networking_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_core_control_plane_networking_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_core_control_plane_networking_v1_service_proto_goTypes = []any{
	(AddRouteResponseCode)(0),   // 0: core.control_plane.networking.v1.AddRouteResponseCode
	(DeleteRouteCode)(0),        // 1: core.control_plane.networking.v1.DeleteRouteCode
	(*AddRouteRequest)(nil),     // 2: core.control_plane.networking.v1.AddRouteRequest
	(*AddRouteResponse)(nil),    // 3: core.control_plane.networking.v1.AddRouteResponse
	(*ListRoutesRequest)(nil),   // 4: core.control_plane.networking.v1.ListRoutesRequest
	(*ListRoutesResponse)(nil),  // 5: core.control_plane.networking.v1.ListRoutesResponse
	(*DeleteRouteRequest)(nil),  // 6: core.control_plane.networking.v1.DeleteRouteRequest
	(*DeleteRouteResponse)(nil), // 7: core.control_plane.networking.v1.DeleteRouteResponse
	(*Route)(nil),               // 8: core.control_plane.networking.v1.Route
	(*Endpoint)(nil),            // 9: core.control_plane.networking.v1.Endpoint
	(*RouteMatch)(nil),          // 10: core.control_plane.networking.v1.RouteMatch
	(*HeaderMatchOptions)(nil),  // 11: core.control_plane.networking.v1.HeaderMatchOptions
	(*GrpcMatchOptions)(nil),    // 12: core.control_plane.networking.v1.GrpcMatchOptions
	(*DynamicMetadata)(nil),     // 13: core.control_plane.networking.v1.DynamicMetadata
}
var file_core_control_plane_networking_v1_service_proto_depIdxs = []int32{
	8,  // 0: core.control_plane.networking.v1.AddRouteRequest.route:type_name -> core.control_plane.networking.v1.Route
	0,  // 1: core.control_plane.networking.v1.AddRouteResponse.code:type_name -> core.control_plane.networking.v1.AddRouteResponseCode
	8,  // 2: core.control_plane.networking.v1.ListRoutesResponse.routes:type_name -> core.control_plane.networking.v1.Route
	1,  // 3: core.control_plane.networking.v1.DeleteRouteResponse.code:type_name -> core.control_plane.networking.v1.DeleteRouteCode
	10, // 4: core.control_plane.networking.v1.Route.match:type_name -> core.control_plane.networking.v1.RouteMatch
	9,  // 5: core.control_plane.networking.v1.Route.endpoint:type_name -> core.control_plane.networking.v1.Endpoint
	11, // 6: core.control_plane.networking.v1.RouteMatch.headers:type_name -> core.control_plane.networking.v1.HeaderMatchOptions
	12, // 7: core.control_plane.networking.v1.RouteMatch.grpc_match_options:type_name -> core.control_plane.networking.v1.GrpcMatchOptions
	13, // 8: core.control_plane.networking.v1.RouteMatch.dynamic_metadata:type_name -> core.control_plane.networking.v1.DynamicMetadata
	2,  // 9: core.control_plane.networking.v1.NetworkingService.AddRoute:input_type -> core.control_plane.networking.v1.AddRouteRequest
	4,  // 10: core.control_plane.networking.v1.NetworkingService.ListRoutes:input_type -> core.control_plane.networking.v1.ListRoutesRequest
	6,  // 11: core.control_plane.networking.v1.NetworkingService.DeleteRoute:input_type -> core.control_plane.networking.v1.DeleteRouteRequest
	3,  // 12: core.control_plane.networking.v1.NetworkingService.AddRoute:output_type -> core.control_plane.networking.v1.AddRouteResponse
	5,  // 13: core.control_plane.networking.v1.NetworkingService.ListRoutes:output_type -> core.control_plane.networking.v1.ListRoutesResponse
	7,  // 14: core.control_plane.networking.v1.NetworkingService.DeleteRoute:output_type -> core.control_plane.networking.v1.DeleteRouteResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_core_control_plane_networking_v1_service_proto_init() }
func file_core_control_plane_networking_v1_service_proto_init() {
	if File_core_control_plane_networking_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_control_plane_networking_v1_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AddRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RouteMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*HeaderMatchOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GrpcMatchOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_control_plane_networking_v1_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_control_plane_networking_v1_service_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_control_plane_networking_v1_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_control_plane_networking_v1_service_proto_goTypes,
		DependencyIndexes: file_core_control_plane_networking_v1_service_proto_depIdxs,
		EnumInfos:         file_core_control_plane_networking_v1_service_proto_enumTypes,
		MessageInfos:      file_core_control_plane_networking_v1_service_proto_msgTypes,
	}.Build()
	File_core_control_plane_networking_v1_service_proto = out.File
	file_core_control_plane_networking_v1_service_proto_rawDesc = nil
	file_core_control_plane_networking_v1_service_proto_goTypes = nil
	file_core_control_plane_networking_v1_service_proto_depIdxs = nil
}
