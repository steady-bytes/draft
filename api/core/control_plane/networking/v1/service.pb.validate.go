// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/control_plane/networking/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddRouteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddRouteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRouteRequestMultiError, or nil if none found.
func (m *AddRouteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRouteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddRouteRequestValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddRouteRequestValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRouteRequestValidationError{
				field:  "Route",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddRouteRequestMultiError(errors)
	}

	return nil
}

// AddRouteRequestMultiError is an error wrapping multiple validation errors
// returned by AddRouteRequest.ValidateAll() if the designated constraints
// aren't met.
type AddRouteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRouteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRouteRequestMultiError) AllErrors() []error { return m }

// AddRouteRequestValidationError is the validation error returned by
// AddRouteRequest.Validate if the designated constraints aren't met.
type AddRouteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRouteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRouteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRouteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRouteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRouteRequestValidationError) ErrorName() string { return "AddRouteRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRouteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRouteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRouteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRouteRequestValidationError{}

// Validate checks the field values on AddRouteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddRouteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRouteResponseMultiError, or nil if none found.
func (m *AddRouteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRouteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return AddRouteResponseMultiError(errors)
	}

	return nil
}

// AddRouteResponseMultiError is an error wrapping multiple validation errors
// returned by AddRouteResponse.ValidateAll() if the designated constraints
// aren't met.
type AddRouteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRouteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRouteResponseMultiError) AllErrors() []error { return m }

// AddRouteResponseValidationError is the validation error returned by
// AddRouteResponse.Validate if the designated constraints aren't met.
type AddRouteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRouteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRouteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRouteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRouteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRouteResponseValidationError) ErrorName() string { return "AddRouteResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddRouteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRouteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRouteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRouteResponseValidationError{}

// Validate checks the field values on ListRoutesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoutesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoutesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoutesRequestMultiError, or nil if none found.
func (m *ListRoutesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoutesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRoutesRequestMultiError(errors)
	}

	return nil
}

// ListRoutesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRoutesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRoutesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoutesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoutesRequestMultiError) AllErrors() []error { return m }

// ListRoutesRequestValidationError is the validation error returned by
// ListRoutesRequest.Validate if the designated constraints aren't met.
type ListRoutesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoutesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoutesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoutesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoutesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoutesRequestValidationError) ErrorName() string {
	return "ListRoutesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoutesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoutesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoutesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoutesRequestValidationError{}

// Validate checks the field values on ListRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoutesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoutesResponseMultiError, or nil if none found.
func (m *ListRoutesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoutesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoutesResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoutesResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoutesResponseValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoutesResponseMultiError(errors)
	}

	return nil
}

// ListRoutesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRoutesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRoutesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoutesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoutesResponseMultiError) AllErrors() []error { return m }

// ListRoutesResponseValidationError is the validation error returned by
// ListRoutesResponse.Validate if the designated constraints aren't met.
type ListRoutesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoutesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoutesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoutesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoutesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoutesResponseValidationError) ErrorName() string {
	return "ListRoutesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoutesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoutesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoutesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoutesResponseValidationError{}

// Validate checks the field values on DeleteRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRouteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRouteRequestMultiError, or nil if none found.
func (m *DeleteRouteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRouteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteRouteRequestMultiError(errors)
	}

	return nil
}

// DeleteRouteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRouteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRouteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRouteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRouteRequestMultiError) AllErrors() []error { return m }

// DeleteRouteRequestValidationError is the validation error returned by
// DeleteRouteRequest.Validate if the designated constraints aren't met.
type DeleteRouteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRouteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRouteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRouteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRouteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRouteRequestValidationError) ErrorName() string {
	return "DeleteRouteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRouteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRouteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRouteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRouteRequestValidationError{}

// Validate checks the field values on DeleteRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRouteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRouteResponseMultiError, or nil if none found.
func (m *DeleteRouteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRouteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return DeleteRouteResponseMultiError(errors)
	}

	return nil
}

// DeleteRouteResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRouteResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRouteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRouteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRouteResponseMultiError) AllErrors() []error { return m }

// DeleteRouteResponseValidationError is the validation error returned by
// DeleteRouteResponse.Validate if the designated constraints aren't met.
type DeleteRouteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRouteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRouteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRouteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRouteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRouteResponseValidationError) ErrorName() string {
	return "DeleteRouteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRouteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRouteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRouteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRouteResponseValidationError{}

// Validate checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Route) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RouteMultiError, or nil if none found.
func (m *Route) ValidateAll() error {
	return m.validate(true)
}

func (m *Route) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableHttp2

	if len(errors) > 0 {
		return RouteMultiError(errors)
	}

	return nil
}

// RouteMultiError is an error wrapping multiple validation errors returned by
// Route.ValidateAll() if the designated constraints aren't met.
type RouteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteMultiError) AllErrors() []error { return m }

// RouteValidationError is the validation error returned by Route.Validate if
// the designated constraints aren't met.
type RouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteValidationError) ErrorName() string { return "RouteValidationError" }

// Error satisfies the builtin error interface
func (e RouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteValidationError{}

// Validate checks the field values on Endpoint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Endpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Endpoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndpointMultiError, or nil
// if none found.
func (m *Endpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *Endpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	if len(errors) > 0 {
		return EndpointMultiError(errors)
	}

	return nil
}

// EndpointMultiError is an error wrapping multiple validation errors returned
// by Endpoint.ValidateAll() if the designated constraints aren't met.
type EndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointMultiError) AllErrors() []error { return m }

// EndpointValidationError is the validation error returned by
// Endpoint.Validate if the designated constraints aren't met.
type EndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointValidationError) ErrorName() string { return "EndpointValidationError" }

// Error satisfies the builtin error interface
func (e EndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointValidationError{}

// Validate checks the field values on RouteMatch with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RouteMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteMatch with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RouteMatchMultiError, or
// nil if none found.
func (m *RouteMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	// no validation rules for Host

	if m.Headers != nil {

		if all {
			switch v := interface{}(m.GetHeaders()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteMatchValidationError{
						field:  "Headers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteMatchValidationError{
						field:  "Headers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteMatchValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GrpcMatchOptions != nil {

		if all {
			switch v := interface{}(m.GetGrpcMatchOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteMatchValidationError{
						field:  "GrpcMatchOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteMatchValidationError{
						field:  "GrpcMatchOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGrpcMatchOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteMatchValidationError{
					field:  "GrpcMatchOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DynamicMetadata != nil {

		if all {
			switch v := interface{}(m.GetDynamicMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteMatchValidationError{
						field:  "DynamicMetadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteMatchValidationError{
						field:  "DynamicMetadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDynamicMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteMatchValidationError{
					field:  "DynamicMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RouteMatchMultiError(errors)
	}

	return nil
}

// RouteMatchMultiError is an error wrapping multiple validation errors
// returned by RouteMatch.ValidateAll() if the designated constraints aren't met.
type RouteMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteMatchMultiError) AllErrors() []error { return m }

// RouteMatchValidationError is the validation error returned by
// RouteMatch.Validate if the designated constraints aren't met.
type RouteMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteMatchValidationError) ErrorName() string { return "RouteMatchValidationError" }

// Error satisfies the builtin error interface
func (e RouteMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteMatchValidationError{}

// Validate checks the field values on HeaderMatchOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HeaderMatchOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeaderMatchOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeaderMatchOptionsMultiError, or nil if none found.
func (m *HeaderMatchOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *HeaderMatchOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return HeaderMatchOptionsMultiError(errors)
	}

	return nil
}

// HeaderMatchOptionsMultiError is an error wrapping multiple validation errors
// returned by HeaderMatchOptions.ValidateAll() if the designated constraints
// aren't met.
type HeaderMatchOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderMatchOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderMatchOptionsMultiError) AllErrors() []error { return m }

// HeaderMatchOptionsValidationError is the validation error returned by
// HeaderMatchOptions.Validate if the designated constraints aren't met.
type HeaderMatchOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderMatchOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderMatchOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderMatchOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderMatchOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderMatchOptionsValidationError) ErrorName() string {
	return "HeaderMatchOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e HeaderMatchOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaderMatchOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderMatchOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderMatchOptionsValidationError{}

// Validate checks the field values on GrpcMatchOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GrpcMatchOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrpcMatchOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrpcMatchOptionsMultiError, or nil if none found.
func (m *GrpcMatchOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GrpcMatchOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GrpcMatchOptionsMultiError(errors)
	}

	return nil
}

// GrpcMatchOptionsMultiError is an error wrapping multiple validation errors
// returned by GrpcMatchOptions.ValidateAll() if the designated constraints
// aren't met.
type GrpcMatchOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrpcMatchOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrpcMatchOptionsMultiError) AllErrors() []error { return m }

// GrpcMatchOptionsValidationError is the validation error returned by
// GrpcMatchOptions.Validate if the designated constraints aren't met.
type GrpcMatchOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrpcMatchOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrpcMatchOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrpcMatchOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrpcMatchOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrpcMatchOptionsValidationError) ErrorName() string { return "GrpcMatchOptionsValidationError" }

// Error satisfies the builtin error interface
func (e GrpcMatchOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrpcMatchOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrpcMatchOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrpcMatchOptionsValidationError{}

// Validate checks the field values on DynamicMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DynamicMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DynamicMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DynamicMetadataMultiError, or nil if none found.
func (m *DynamicMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *DynamicMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DynamicMetadataMultiError(errors)
	}

	return nil
}

// DynamicMetadataMultiError is an error wrapping multiple validation errors
// returned by DynamicMetadata.ValidateAll() if the designated constraints
// aren't met.
type DynamicMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DynamicMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DynamicMetadataMultiError) AllErrors() []error { return m }

// DynamicMetadataValidationError is the validation error returned by
// DynamicMetadata.Validate if the designated constraints aren't met.
type DynamicMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicMetadataValidationError) ErrorName() string { return "DynamicMetadataValidationError" }

// Error satisfies the builtin error interface
func (e DynamicMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamicMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicMetadataValidationError{}
