// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/control_plane/networking/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/steady-bytes/draft/api/core/control_plane/networking/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkingServiceName is the fully-qualified name of the NetworkingService service.
	NetworkingServiceName = "core.control_plane.networking.v1.NetworkingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkingServiceAddRouteProcedure is the fully-qualified name of the NetworkingService's
	// AddRoute RPC.
	NetworkingServiceAddRouteProcedure = "/core.control_plane.networking.v1.NetworkingService/AddRoute"
	// NetworkingServiceListRoutesProcedure is the fully-qualified name of the NetworkingService's
	// ListRoutes RPC.
	NetworkingServiceListRoutesProcedure = "/core.control_plane.networking.v1.NetworkingService/ListRoutes"
	// NetworkingServiceDeleteRouteProcedure is the fully-qualified name of the NetworkingService's
	// DeleteRoute RPC.
	NetworkingServiceDeleteRouteProcedure = "/core.control_plane.networking.v1.NetworkingService/DeleteRoute"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	networkingServiceServiceDescriptor           = v1.File_core_control_plane_networking_v1_service_proto.Services().ByName("NetworkingService")
	networkingServiceAddRouteMethodDescriptor    = networkingServiceServiceDescriptor.Methods().ByName("AddRoute")
	networkingServiceListRoutesMethodDescriptor  = networkingServiceServiceDescriptor.Methods().ByName("ListRoutes")
	networkingServiceDeleteRouteMethodDescriptor = networkingServiceServiceDescriptor.Methods().ByName("DeleteRoute")
)

// NetworkingServiceClient is a client for the core.control_plane.networking.v1.NetworkingService
// service.
type NetworkingServiceClient interface {
	// Add route exposing an endpoint on the gateway and routing traffic to the correct process
	AddRoute(context.Context, *connect.Request[v1.AddRouteRequest]) (*connect.Response[v1.AddRouteResponse], error)
	// List all routes in the networking configuration
	ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error)
	// Delete a route from the networking configuration, requires the name of the route
	// and returns a response code to indicate the success of the operation
	DeleteRoute(context.Context, *connect.Request[v1.DeleteRouteRequest]) (*connect.Response[v1.DeleteRouteResponse], error)
}

// NewNetworkingServiceClient constructs a client for the
// core.control_plane.networking.v1.NetworkingService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &networkingServiceClient{
		addRoute: connect.NewClient[v1.AddRouteRequest, v1.AddRouteResponse](
			httpClient,
			baseURL+NetworkingServiceAddRouteProcedure,
			connect.WithSchema(networkingServiceAddRouteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRoutes: connect.NewClient[v1.ListRoutesRequest, v1.ListRoutesResponse](
			httpClient,
			baseURL+NetworkingServiceListRoutesProcedure,
			connect.WithSchema(networkingServiceListRoutesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRoute: connect.NewClient[v1.DeleteRouteRequest, v1.DeleteRouteResponse](
			httpClient,
			baseURL+NetworkingServiceDeleteRouteProcedure,
			connect.WithSchema(networkingServiceDeleteRouteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkingServiceClient implements NetworkingServiceClient.
type networkingServiceClient struct {
	addRoute    *connect.Client[v1.AddRouteRequest, v1.AddRouteResponse]
	listRoutes  *connect.Client[v1.ListRoutesRequest, v1.ListRoutesResponse]
	deleteRoute *connect.Client[v1.DeleteRouteRequest, v1.DeleteRouteResponse]
}

// AddRoute calls core.control_plane.networking.v1.NetworkingService.AddRoute.
func (c *networkingServiceClient) AddRoute(ctx context.Context, req *connect.Request[v1.AddRouteRequest]) (*connect.Response[v1.AddRouteResponse], error) {
	return c.addRoute.CallUnary(ctx, req)
}

// ListRoutes calls core.control_plane.networking.v1.NetworkingService.ListRoutes.
func (c *networkingServiceClient) ListRoutes(ctx context.Context, req *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error) {
	return c.listRoutes.CallUnary(ctx, req)
}

// DeleteRoute calls core.control_plane.networking.v1.NetworkingService.DeleteRoute.
func (c *networkingServiceClient) DeleteRoute(ctx context.Context, req *connect.Request[v1.DeleteRouteRequest]) (*connect.Response[v1.DeleteRouteResponse], error) {
	return c.deleteRoute.CallUnary(ctx, req)
}

// NetworkingServiceHandler is an implementation of the
// core.control_plane.networking.v1.NetworkingService service.
type NetworkingServiceHandler interface {
	// Add route exposing an endpoint on the gateway and routing traffic to the correct process
	AddRoute(context.Context, *connect.Request[v1.AddRouteRequest]) (*connect.Response[v1.AddRouteResponse], error)
	// List all routes in the networking configuration
	ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error)
	// Delete a route from the networking configuration, requires the name of the route
	// and returns a response code to indicate the success of the operation
	DeleteRoute(context.Context, *connect.Request[v1.DeleteRouteRequest]) (*connect.Response[v1.DeleteRouteResponse], error)
}

// NewNetworkingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkingServiceHandler(svc NetworkingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkingServiceAddRouteHandler := connect.NewUnaryHandler(
		NetworkingServiceAddRouteProcedure,
		svc.AddRoute,
		connect.WithSchema(networkingServiceAddRouteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkingServiceListRoutesHandler := connect.NewUnaryHandler(
		NetworkingServiceListRoutesProcedure,
		svc.ListRoutes,
		connect.WithSchema(networkingServiceListRoutesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkingServiceDeleteRouteHandler := connect.NewUnaryHandler(
		NetworkingServiceDeleteRouteProcedure,
		svc.DeleteRoute,
		connect.WithSchema(networkingServiceDeleteRouteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.control_plane.networking.v1.NetworkingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkingServiceAddRouteProcedure:
			networkingServiceAddRouteHandler.ServeHTTP(w, r)
		case NetworkingServiceListRoutesProcedure:
			networkingServiceListRoutesHandler.ServeHTTP(w, r)
		case NetworkingServiceDeleteRouteProcedure:
			networkingServiceDeleteRouteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkingServiceHandler struct{}

func (UnimplementedNetworkingServiceHandler) AddRoute(context.Context, *connect.Request[v1.AddRouteRequest]) (*connect.Response[v1.AddRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.control_plane.networking.v1.NetworkingService.AddRoute is not implemented"))
}

func (UnimplementedNetworkingServiceHandler) ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.control_plane.networking.v1.NetworkingService.ListRoutes is not implemented"))
}

func (UnimplementedNetworkingServiceHandler) DeleteRoute(context.Context, *connect.Request[v1.DeleteRouteRequest]) (*connect.Response[v1.DeleteRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.control_plane.networking.v1.NetworkingService.DeleteRoute is not implemented"))
}
