// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file core/message_broker/actors/v1/producer.proto (package core.message_broker.actors.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CloudEvent } from "./models_pb.js";

/**
 * Send this `Message` to the other `Actors` in the system that are subscribed to this `Message`
 *
 * @generated from message core.message_broker.actors.v1.ProduceRequest
 */
export class ProduceRequest extends Message<ProduceRequest> {
  /**
   * @generated from field: core.message_broker.actors.v1.CloudEvent message = 1;
   */
  message?: CloudEvent;

  constructor(data?: PartialMessage<ProduceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.message_broker.actors.v1.ProduceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: CloudEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProduceRequest {
    return new ProduceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProduceRequest {
    return new ProduceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProduceRequest {
    return new ProduceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProduceRequest | PlainMessage<ProduceRequest> | undefined, b: ProduceRequest | PlainMessage<ProduceRequest> | undefined): boolean {
    return proto3.util.equals(ProduceRequest, a, b);
  }
}

/**
 * @generated from message core.message_broker.actors.v1.ProduceResponse
 */
export class ProduceResponse extends Message<ProduceResponse> {
  /**
   * The message id is returned as a way to acknowledge the message as been committed
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ProduceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.message_broker.actors.v1.ProduceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProduceResponse {
    return new ProduceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProduceResponse {
    return new ProduceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProduceResponse {
    return new ProduceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProduceResponse | PlainMessage<ProduceResponse> | undefined, b: ProduceResponse | PlainMessage<ProduceResponse> | undefined): boolean {
    return proto3.util.equals(ProduceResponse, a, b);
  }
}

