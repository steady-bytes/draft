// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/message_broker/actors/v1/consumer.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/steady-bytes/draft/api/core/message_broker/actors/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConsumerName is the fully-qualified name of the Consumer service.
	ConsumerName = "core.message_broker.actors.v1.Consumer"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConsumerConsumeProcedure is the fully-qualified name of the Consumer's Consume RPC.
	ConsumerConsumeProcedure = "/core.message_broker.actors.v1.Consumer/Consume"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	consumerServiceDescriptor       = v1.File_core_message_broker_actors_v1_consumer_proto.Services().ByName("Consumer")
	consumerConsumeMethodDescriptor = consumerServiceDescriptor.Methods().ByName("Consume")
)

// ConsumerClient is a client for the core.message_broker.actors.v1.Consumer service.
type ConsumerClient interface {
	Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.ServerStreamForClient[v1.ConsumeResponse], error)
}

// NewConsumerClient constructs a client for the core.message_broker.actors.v1.Consumer service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConsumerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConsumerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &consumerClient{
		consume: connect.NewClient[v1.ConsumeRequest, v1.ConsumeResponse](
			httpClient,
			baseURL+ConsumerConsumeProcedure,
			connect.WithSchema(consumerConsumeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// consumerClient implements ConsumerClient.
type consumerClient struct {
	consume *connect.Client[v1.ConsumeRequest, v1.ConsumeResponse]
}

// Consume calls core.message_broker.actors.v1.Consumer.Consume.
func (c *consumerClient) Consume(ctx context.Context, req *connect.Request[v1.ConsumeRequest]) (*connect.ServerStreamForClient[v1.ConsumeResponse], error) {
	return c.consume.CallServerStream(ctx, req)
}

// ConsumerHandler is an implementation of the core.message_broker.actors.v1.Consumer service.
type ConsumerHandler interface {
	Consume(context.Context, *connect.Request[v1.ConsumeRequest], *connect.ServerStream[v1.ConsumeResponse]) error
}

// NewConsumerHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConsumerHandler(svc ConsumerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	consumerConsumeHandler := connect.NewServerStreamHandler(
		ConsumerConsumeProcedure,
		svc.Consume,
		connect.WithSchema(consumerConsumeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.message_broker.actors.v1.Consumer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConsumerConsumeProcedure:
			consumerConsumeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConsumerHandler returns CodeUnimplemented from all methods.
type UnimplementedConsumerHandler struct{}

func (UnimplementedConsumerHandler) Consume(context.Context, *connect.Request[v1.ConsumeRequest], *connect.ServerStream[v1.ConsumeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("core.message_broker.actors.v1.Consumer.Consume is not implemented"))
}
