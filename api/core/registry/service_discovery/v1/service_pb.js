// @generated by protoc-gen-es v1.6.0 with parameter "target=js"
// @generated from file core/registry/service_discovery/v1/service.proto (package core.registry.service_discovery.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { GeoPoint, Metadata, Process, ProcessHealthState, ProcessIdentity, ProcessKind, ProcessRunningState, StartupConfiguration } from "./models_pb.js";

/**
 * @generated from enum core.registry.service_discovery.v1.LeadershipStatus
 */
export const LeadershipStatus = proto3.makeEnum(
  "core.registry.service_discovery.v1.LeadershipStatus",
  [
    {no: 0, name: "LEADERSHIP_STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "LEADERSHIP_STATUS_LEADER", localName: "LEADER"},
    {no: 2, name: "LEADERSHIP_STATUS_FOLLOWER", localName: "FOLLOWER"},
  ],
);

/**
 * ProcessDetails - Messages that are sent from the `Process` to the registry.
 * These details are basic operating messages
 *
 * @generated from message core.registry.service_discovery.v1.ClientDetails
 */
export const ClientDetails = proto3.makeMessageType(
  "core.registry.service_discovery.v1.ClientDetails",
  () => [
    { no: 1, name: "pid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "running_state", kind: "enum", T: proto3.getEnumType(ProcessRunningState) },
    { no: 3, name: "health_state", kind: "enum", T: proto3.getEnumType(ProcessHealthState) },
    { no: 4, name: "process_kind", kind: "enum", T: proto3.getEnumType(ProcessKind) },
    { no: 5, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "location", kind: "message", T: GeoPoint },
    { no: 8, name: "metadata", kind: "message", T: Metadata, repeated: true },
    { no: 9, name: "advertise_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message core.registry.service_discovery.v1.ClusterDetails
 */
export const ClusterDetails = proto3.makeMessageType(
  "core.registry.service_discovery.v1.ClusterDetails",
  () => [
    { no: 1, name: "nodes", kind: "message", T: Node, repeated: true },
  ],
);

/**
 * @generated from message core.registry.service_discovery.v1.Node
 */
export const Node = proto3.makeMessageType(
  "core.registry.service_discovery.v1.Node",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "leadership_status", kind: "enum", T: proto3.getEnumType(LeadershipStatus) },
  ],
);

/**
 * InitRequest - Begin the service registry registration flow.
 *
 * @generated from message core.registry.service_discovery.v1.InitializeRequest
 */
export const InitializeRequest = proto3.makeMessageType(
  "core.registry.service_discovery.v1.InitializeRequest",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * InitResponse - Details used by the client to provided to complete the connection
 * If the token is lost and the registry has not received a `ProcessDetails` message within a 2 mintues
 * of the token being forged then the client will have to reinit to connect to the registry/system.
 *
 * @generated from message core.registry.service_discovery.v1.InitializeResponse
 */
export const InitializeResponse = proto3.makeMessageType(
  "core.registry.service_discovery.v1.InitializeResponse",
  () => [
    { no: 1, name: "process_identity", kind: "message", T: ProcessIdentity },
    { no: 2, name: "configuration", kind: "message", T: StartupConfiguration },
  ],
);

/**
 * @generated from message core.registry.service_discovery.v1.QueryRequest
 */
export const QueryRequest = proto3.makeMessageType(
  "core.registry.service_discovery.v1.QueryRequest",
  () => [
    { no: 1, name: "filter", kind: "message", T: Filter },
  ],
);

/**
 * @generated from message core.registry.service_discovery.v1.Filter
 */
export const Filter = proto3.makeMessageType(
  "core.registry.service_discovery.v1.Filter",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "attribute" },
    { no: 2, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "attribute" },
    { no: 3, name: "all", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "attribute" },
  ],
);

/**
 * @generated from message core.registry.service_discovery.v1.QueryResponse
 */
export const QueryResponse = proto3.makeMessageType(
  "core.registry.service_discovery.v1.QueryResponse",
  () => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Process} },
  ],
);

/**
 * @generated from message core.registry.service_discovery.v1.FinalizeRequest
 */
export const FinalizeRequest = proto3.makeMessageType(
  "core.registry.service_discovery.v1.FinalizeRequest",
  () => [
    { no: 1, name: "pid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message core.registry.service_discovery.v1.FinalizeResponse
 */
export const FinalizeResponse = proto3.makeMessageType(
  "core.registry.service_discovery.v1.FinalizeResponse",
  () => [
    { no: 1, name: "pid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message core.registry.service_discovery.v1.ReportHealthRequest
 */
export const ReportHealthRequest = proto3.makeMessageType(
  "core.registry.service_discovery.v1.ReportHealthRequest",
  [],
);

/**
 * @generated from message core.registry.service_discovery.v1.ReportHealthResponse
 */
export const ReportHealthResponse = proto3.makeMessageType(
  "core.registry.service_discovery.v1.ReportHealthResponse",
  [],
);

