// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: core/registry/service_discovery/v1/models.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Server currently falls into a category that is consuming requests from the outside world
// the `Job` is something that is private and not serving any external requests. I could however
// be pulling messages from a message queue, and or doing some batch processing. I.e. some sort of
// training.
type ProcessKind int32

const (
	ProcessKind_INVALID_PROCESS_KIND ProcessKind = 0
	ProcessKind_SERVER_PROCESS       ProcessKind = 1
	ProcessKind_JOB_PROCESS          ProcessKind = 2
)

// Enum value maps for ProcessKind.
var (
	ProcessKind_name = map[int32]string{
		0: "INVALID_PROCESS_KIND",
		1: "SERVER_PROCESS",
		2: "JOB_PROCESS",
	}
	ProcessKind_value = map[string]int32{
		"INVALID_PROCESS_KIND": 0,
		"SERVER_PROCESS":       1,
		"JOB_PROCESS":          2,
	}
)

func (x ProcessKind) Enum() *ProcessKind {
	p := new(ProcessKind)
	*p = x
	return p
}

func (x ProcessKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessKind) Descriptor() protoreflect.EnumDescriptor {
	return file_core_registry_service_discovery_v1_models_proto_enumTypes[0].Descriptor()
}

func (ProcessKind) Type() protoreflect.EnumType {
	return &file_core_registry_service_discovery_v1_models_proto_enumTypes[0]
}

func (x ProcessKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessKind.Descriptor instead.
func (ProcessKind) EnumDescriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{0}
}

type ProcessRunningState int32

const (
	ProcessRunningState_INVALID_PROCESS_RUNNING_STATE ProcessRunningState = 0
	ProcessRunningState_PROCESS_STARTING              ProcessRunningState = 1
	ProcessRunningState_PROCESS_TESTING               ProcessRunningState = 2
	ProcessRunningState_PROCESS_RUNNING               ProcessRunningState = 3
	ProcessRunningState_PROCESS_DICONNECTED           ProcessRunningState = 4
)

// Enum value maps for ProcessRunningState.
var (
	ProcessRunningState_name = map[int32]string{
		0: "INVALID_PROCESS_RUNNING_STATE",
		1: "PROCESS_STARTING",
		2: "PROCESS_TESTING",
		3: "PROCESS_RUNNING",
		4: "PROCESS_DICONNECTED",
	}
	ProcessRunningState_value = map[string]int32{
		"INVALID_PROCESS_RUNNING_STATE": 0,
		"PROCESS_STARTING":              1,
		"PROCESS_TESTING":               2,
		"PROCESS_RUNNING":               3,
		"PROCESS_DICONNECTED":           4,
	}
)

func (x ProcessRunningState) Enum() *ProcessRunningState {
	p := new(ProcessRunningState)
	*p = x
	return p
}

func (x ProcessRunningState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessRunningState) Descriptor() protoreflect.EnumDescriptor {
	return file_core_registry_service_discovery_v1_models_proto_enumTypes[1].Descriptor()
}

func (ProcessRunningState) Type() protoreflect.EnumType {
	return &file_core_registry_service_discovery_v1_models_proto_enumTypes[1]
}

func (x ProcessRunningState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessRunningState.Descriptor instead.
func (ProcessRunningState) EnumDescriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{1}
}

type ProcessHealthState int32

const (
	ProcessHealthState_INVALID_PROCESS_HEALTH_STATE ProcessHealthState = 0
	ProcessHealthState_PROCESS_HEALTHY              ProcessHealthState = 1
	ProcessHealthState_PROCESS_UNHEALTHY            ProcessHealthState = 2
)

// Enum value maps for ProcessHealthState.
var (
	ProcessHealthState_name = map[int32]string{
		0: "INVALID_PROCESS_HEALTH_STATE",
		1: "PROCESS_HEALTHY",
		2: "PROCESS_UNHEALTHY",
	}
	ProcessHealthState_value = map[string]int32{
		"INVALID_PROCESS_HEALTH_STATE": 0,
		"PROCESS_HEALTHY":              1,
		"PROCESS_UNHEALTHY":            2,
	}
)

func (x ProcessHealthState) Enum() *ProcessHealthState {
	p := new(ProcessHealthState)
	*p = x
	return p
}

func (x ProcessHealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessHealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_core_registry_service_discovery_v1_models_proto_enumTypes[2].Descriptor()
}

func (ProcessHealthState) Type() protoreflect.EnumType {
	return &file_core_registry_service_discovery_v1_models_proto_enumTypes[2]
}

func (x ProcessHealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessHealthState.Descriptor instead.
func (ProcessHealthState) EnumDescriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{2}
}

// Entities
type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{0}
}

// ProcessIdentity -
type ProcessIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the process_id is assigned when the join request is successful
	// however it does not mean that the process registered, running
	// and in a stage ready to receive traffic
	Pid string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid" pg:"pid" bun:"pid" yaml:"pid" csv:"pid"`
	// the address the registering process must stream it's health, and status messages to
	RegistryAddress string `protobuf:"bytes,2,opt,name=registry_address,json=registryAddress,proto3" json:"registry_address" pg:"registry_address" bun:"registry_address" yaml:"registry_address" csv:"registry_address"`
	// authentication credentials that must be added to each request to the registry
	Token *Token `protobuf:"bytes,3,opt,name=token,proto3" json:"token" pg:"token" bun:"token" yaml:"token" csv:"token"`
}

func (x *ProcessIdentity) Reset() {
	*x = ProcessIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIdentity) ProtoMessage() {}

func (x *ProcessIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessIdentity.ProtoReflect.Descriptor instead.
func (*ProcessIdentity) Descriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessIdentity) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *ProcessIdentity) GetRegistryAddress() string {
	if x != nil {
		return x.RegistryAddress
	}
	return ""
}

func (x *ProcessIdentity) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

// configuration the registry is giving to the process to run
type StartupConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignedPort uint32 `protobuf:"varint,1,opt,name=assigned_port,json=assignedPort,proto3" json:"assigned_port" yaml:"assigned_port" csv:"assigned_port" pg:"assigned_port" bun:"assigned_port"`
}

func (x *StartupConfiguration) Reset() {
	*x = StartupConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartupConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartupConfiguration) ProtoMessage() {}

func (x *StartupConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartupConfiguration.ProtoReflect.Descriptor instead.
func (*StartupConfiguration) Descriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{2}
}

func (x *StartupConfiguration) GetAssignedPort() uint32 {
	if x != nil {
		return x.AssignedPort
	}
	return 0
}

// A process is a running program on a computer.
type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pid - is a uuid to identify each process of the system normally
	// this would follow the normal `id` naming convention. But given
	// a `pid` in most systems is very specific, that tradition will be
	// carried on.
	Pid string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid" pg:"pid" bun:"pid" yaml:"pid" csv:"pid"`
	// name is not required to be unique between other processes. The `pid`
	// is the specific identifier used to lookup a single process.s
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name" pg:"name" bun:"name" yaml:"name" csv:"name"`
	Group          string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group" pg:"group" bun:"group" yaml:"group" csv:"group"`
	Local          string                 `protobuf:"bytes,4,opt,name=local,proto3" json:"local" yaml:"local" csv:"local" pg:"local" bun:"local"`
	IpAddress      string                 `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address" csv:"ip_address" pg:"ip_address" bun:"ip_address" yaml:"ip_address"` // port?
	ProcessKind    ProcessKind            `protobuf:"varint,6,opt,name=process_kind,json=processKind,proto3,enum=core.registry.service_discovery.v1.ProcessKind" json:"process_kind" pg:"process_kind" bun:"process_kind" yaml:"process_kind" csv:"process_kind"`
	Metadata       []*Metadata            `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata" pg:"metadata" bun:"metadata" yaml:"metadata" csv:"metadata"`
	Location       *GeoPoint              `protobuf:"bytes,8,opt,name=location,proto3" json:"location" pg:"location" bun:"location" yaml:"location" csv:"location"`
	JoinedTime     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=joined_time,json=joinedTime,proto3" json:"joined_time" pg:"joined_time" bun:"joined_time" yaml:"joined_time" csv:"joined_time"`
	LeftTime       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=left_time,json=leftTime,proto3" json:"left_time" bun:"left_time" yaml:"left_time" csv:"left_time" pg:"left_time"`
	LastStatusTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_status_time,json=lastStatusTime,proto3" json:"last_status_time" pg:"last_status_time" bun:"last_status_time" yaml:"last_status_time" csv:"last_status_time"`
	RunningState   ProcessRunningState    `protobuf:"varint,12,opt,name=running_state,json=runningState,proto3,enum=core.registry.service_discovery.v1.ProcessRunningState" json:"running_state" pg:"running_state" bun:"running_state" yaml:"running_state" csv:"running_state"`
	HealthState    ProcessHealthState     `protobuf:"varint,13,opt,name=health_state,json=healthState,proto3,enum=core.registry.service_discovery.v1.ProcessHealthState" json:"health_state" pg:"health_state" bun:"health_state" yaml:"health_state" csv:"health_state"`
	Token          *Token                 `protobuf:"bytes,14,opt,name=token,proto3" json:"token" yaml:"token" csv:"token" pg:"token" bun:"token"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{3}
}

func (x *Process) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Process) GetLocal() string {
	if x != nil {
		return x.Local
	}
	return ""
}

func (x *Process) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Process) GetProcessKind() ProcessKind {
	if x != nil {
		return x.ProcessKind
	}
	return ProcessKind_INVALID_PROCESS_KIND
}

func (x *Process) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Process) GetLocation() *GeoPoint {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Process) GetJoinedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedTime
	}
	return nil
}

func (x *Process) GetLeftTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LeftTime
	}
	return nil
}

func (x *Process) GetLastStatusTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStatusTime
	}
	return nil
}

func (x *Process) GetRunningState() ProcessRunningState {
	if x != nil {
		return x.RunningState
	}
	return ProcessRunningState_INVALID_PROCESS_RUNNING_STATE
}

func (x *Process) GetHealthState() ProcessHealthState {
	if x != nil {
		return x.HealthState
	}
	return ProcessHealthState_INVALID_PROCESS_HEALTH_STATE
}

func (x *Process) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

// Associated data that can be used to lookup the process
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid   string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid" pg:"pid" bun:"pid" yaml:"pid" csv:"pid"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key" csv:"key" pg:"key" bun:"key" yaml:"key"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value" pg:"value" bun:"value" yaml:"value" csv:"value"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *Metadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Metadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// GeoPoint - Is the location of something using standard lat/lng notion.
type GeoPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float32 `protobuf:"fixed32,1,opt,name=lat,proto3" json:"lat" pg:"lat" bun:"lat" yaml:"lat" csv:"lat"`
	Lng float32 `protobuf:"fixed32,2,opt,name=lng,proto3" json:"lng" pg:"lng" bun:"lng" yaml:"lng" csv:"lng"`
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{5}
}

func (x *GeoPoint) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GeoPoint) GetLng() float32 {
	if x != nil {
		return x.Lng
	}
	return 0
}

// Token that is generated when the `Init` function is called with the correct `nonce`
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" pg:"id" bun:"id" yaml:"id" csv:"id"`
	Jwt string `protobuf:"bytes,3,opt,name=jwt,proto3" json:"jwt" csv:"jwt" pg:"jwt" bun:"jwt" yaml:"jwt"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_core_registry_service_discovery_v1_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_core_registry_service_discovery_v1_models_proto_rawDescGZIP(), []int{6}
}

func (x *Token) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Token) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

var File_core_registry_service_discovery_v1_models_proto protoreflect.FileDescriptor

var file_core_registry_service_discovery_v1_models_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x22, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x06, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x3b, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x98, 0x06,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x48,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c,
	0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0c,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x44, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e,
	0x0a, 0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x22, 0x29,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x2a, 0x4c, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x2a, 0x91, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x62, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x42,
	0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x79, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2f, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_registry_service_discovery_v1_models_proto_rawDescOnce sync.Once
	file_core_registry_service_discovery_v1_models_proto_rawDescData = file_core_registry_service_discovery_v1_models_proto_rawDesc
)

func file_core_registry_service_discovery_v1_models_proto_rawDescGZIP() []byte {
	file_core_registry_service_discovery_v1_models_proto_rawDescOnce.Do(func() {
		file_core_registry_service_discovery_v1_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_registry_service_discovery_v1_models_proto_rawDescData)
	})
	return file_core_registry_service_discovery_v1_models_proto_rawDescData
}

var file_core_registry_service_discovery_v1_models_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_core_registry_service_discovery_v1_models_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_core_registry_service_discovery_v1_models_proto_goTypes = []any{
	(ProcessKind)(0),              // 0: core.registry.service_discovery.v1.ProcessKind
	(ProcessRunningState)(0),      // 1: core.registry.service_discovery.v1.ProcessRunningState
	(ProcessHealthState)(0),       // 2: core.registry.service_discovery.v1.ProcessHealthState
	(*Zone)(nil),                  // 3: core.registry.service_discovery.v1.Zone
	(*ProcessIdentity)(nil),       // 4: core.registry.service_discovery.v1.ProcessIdentity
	(*StartupConfiguration)(nil),  // 5: core.registry.service_discovery.v1.StartupConfiguration
	(*Process)(nil),               // 6: core.registry.service_discovery.v1.Process
	(*Metadata)(nil),              // 7: core.registry.service_discovery.v1.Metadata
	(*GeoPoint)(nil),              // 8: core.registry.service_discovery.v1.GeoPoint
	(*Token)(nil),                 // 9: core.registry.service_discovery.v1.Token
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_core_registry_service_discovery_v1_models_proto_depIdxs = []int32{
	9,  // 0: core.registry.service_discovery.v1.ProcessIdentity.token:type_name -> core.registry.service_discovery.v1.Token
	0,  // 1: core.registry.service_discovery.v1.Process.process_kind:type_name -> core.registry.service_discovery.v1.ProcessKind
	7,  // 2: core.registry.service_discovery.v1.Process.metadata:type_name -> core.registry.service_discovery.v1.Metadata
	8,  // 3: core.registry.service_discovery.v1.Process.location:type_name -> core.registry.service_discovery.v1.GeoPoint
	10, // 4: core.registry.service_discovery.v1.Process.joined_time:type_name -> google.protobuf.Timestamp
	10, // 5: core.registry.service_discovery.v1.Process.left_time:type_name -> google.protobuf.Timestamp
	10, // 6: core.registry.service_discovery.v1.Process.last_status_time:type_name -> google.protobuf.Timestamp
	1,  // 7: core.registry.service_discovery.v1.Process.running_state:type_name -> core.registry.service_discovery.v1.ProcessRunningState
	2,  // 8: core.registry.service_discovery.v1.Process.health_state:type_name -> core.registry.service_discovery.v1.ProcessHealthState
	9,  // 9: core.registry.service_discovery.v1.Process.token:type_name -> core.registry.service_discovery.v1.Token
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_core_registry_service_discovery_v1_models_proto_init() }
func file_core_registry_service_discovery_v1_models_proto_init() {
	if File_core_registry_service_discovery_v1_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_registry_service_discovery_v1_models_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_registry_service_discovery_v1_models_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_registry_service_discovery_v1_models_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StartupConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_registry_service_discovery_v1_models_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_registry_service_discovery_v1_models_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_registry_service_discovery_v1_models_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GeoPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_registry_service_discovery_v1_models_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_registry_service_discovery_v1_models_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_registry_service_discovery_v1_models_proto_goTypes,
		DependencyIndexes: file_core_registry_service_discovery_v1_models_proto_depIdxs,
		EnumInfos:         file_core_registry_service_discovery_v1_models_proto_enumTypes,
		MessageInfos:      file_core_registry_service_discovery_v1_models_proto_msgTypes,
	}.Build()
	File_core_registry_service_discovery_v1_models_proto = out.File
	file_core_registry_service_discovery_v1_models_proto_rawDesc = nil
	file_core_registry_service_discovery_v1_models_proto_goTypes = nil
	file_core_registry_service_discovery_v1_models_proto_depIdxs = nil
}
