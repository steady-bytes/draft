// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/registry/service_discovery/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/steady-bytes/draft/api/core/registry/service_discovery/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceDiscoveryServiceName is the fully-qualified name of the ServiceDiscoveryService service.
	ServiceDiscoveryServiceName = "core.registry.service_discovery.v1.ServiceDiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceDiscoveryServiceInitializeProcedure is the fully-qualified name of the
	// ServiceDiscoveryService's Initialize RPC.
	ServiceDiscoveryServiceInitializeProcedure = "/core.registry.service_discovery.v1.ServiceDiscoveryService/Initialize"
	// ServiceDiscoveryServiceSynchronizeProcedure is the fully-qualified name of the
	// ServiceDiscoveryService's Synchronize RPC.
	ServiceDiscoveryServiceSynchronizeProcedure = "/core.registry.service_discovery.v1.ServiceDiscoveryService/Synchronize"
	// ServiceDiscoveryServiceFinalizeProcedure is the fully-qualified name of the
	// ServiceDiscoveryService's Finalize RPC.
	ServiceDiscoveryServiceFinalizeProcedure = "/core.registry.service_discovery.v1.ServiceDiscoveryService/Finalize"
	// ServiceDiscoveryServiceReportHealthProcedure is the fully-qualified name of the
	// ServiceDiscoveryService's ReportHealth RPC.
	ServiceDiscoveryServiceReportHealthProcedure = "/core.registry.service_discovery.v1.ServiceDiscoveryService/ReportHealth"
	// ServiceDiscoveryServiceQueryProcedure is the fully-qualified name of the
	// ServiceDiscoveryService's Query RPC.
	ServiceDiscoveryServiceQueryProcedure = "/core.registry.service_discovery.v1.ServiceDiscoveryService/Query"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceDiscoveryServiceServiceDescriptor            = v1.File_core_registry_service_discovery_v1_service_proto.Services().ByName("ServiceDiscoveryService")
	serviceDiscoveryServiceInitializeMethodDescriptor   = serviceDiscoveryServiceServiceDescriptor.Methods().ByName("Initialize")
	serviceDiscoveryServiceSynchronizeMethodDescriptor  = serviceDiscoveryServiceServiceDescriptor.Methods().ByName("Synchronize")
	serviceDiscoveryServiceFinalizeMethodDescriptor     = serviceDiscoveryServiceServiceDescriptor.Methods().ByName("Finalize")
	serviceDiscoveryServiceReportHealthMethodDescriptor = serviceDiscoveryServiceServiceDescriptor.Methods().ByName("ReportHealth")
	serviceDiscoveryServiceQueryMethodDescriptor        = serviceDiscoveryServiceServiceDescriptor.Methods().ByName("Query")
)

// ServiceDiscoveryServiceClient is a client for the
// core.registry.service_discovery.v1.ServiceDiscoveryService service.
type ServiceDiscoveryServiceClient interface {
	// Initialize the registeration of the process to the registry
	Initialize(context.Context, *connect.Request[v1.InitializeRequest]) (*connect.Response[v1.InitializeResponse], error)
	// synchronize the client state with the registry
	Synchronize(context.Context) *connect.ClientStreamForClient[v1.ClientDetails, v1.Empty]
	// Gracefully shutdown and `Finalize` the connection of the process to the registry
	Finalize(context.Context, *connect.Request[v1.FinalizeRequest]) (*connect.Response[v1.FinalizeResponse], error)
	// Let a follower draft node report health information on the processes it's responsible for checking the health status of
	ReportHealth(context.Context, *connect.Request[v1.ReportHealthRequest]) (*connect.Response[v1.ReportHealthResponse], error)
	// Query the registry
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewServiceDiscoveryServiceClient constructs a client for the
// core.registry.service_discovery.v1.ServiceDiscoveryService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceDiscoveryServiceClient{
		initialize: connect.NewClient[v1.InitializeRequest, v1.InitializeResponse](
			httpClient,
			baseURL+ServiceDiscoveryServiceInitializeProcedure,
			connect.WithSchema(serviceDiscoveryServiceInitializeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		synchronize: connect.NewClient[v1.ClientDetails, v1.Empty](
			httpClient,
			baseURL+ServiceDiscoveryServiceSynchronizeProcedure,
			connect.WithSchema(serviceDiscoveryServiceSynchronizeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		finalize: connect.NewClient[v1.FinalizeRequest, v1.FinalizeResponse](
			httpClient,
			baseURL+ServiceDiscoveryServiceFinalizeProcedure,
			connect.WithSchema(serviceDiscoveryServiceFinalizeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportHealth: connect.NewClient[v1.ReportHealthRequest, v1.ReportHealthResponse](
			httpClient,
			baseURL+ServiceDiscoveryServiceReportHealthProcedure,
			connect.WithSchema(serviceDiscoveryServiceReportHealthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		query: connect.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+ServiceDiscoveryServiceQueryProcedure,
			connect.WithSchema(serviceDiscoveryServiceQueryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceDiscoveryServiceClient implements ServiceDiscoveryServiceClient.
type serviceDiscoveryServiceClient struct {
	initialize   *connect.Client[v1.InitializeRequest, v1.InitializeResponse]
	synchronize  *connect.Client[v1.ClientDetails, v1.Empty]
	finalize     *connect.Client[v1.FinalizeRequest, v1.FinalizeResponse]
	reportHealth *connect.Client[v1.ReportHealthRequest, v1.ReportHealthResponse]
	query        *connect.Client[v1.QueryRequest, v1.QueryResponse]
}

// Initialize calls core.registry.service_discovery.v1.ServiceDiscoveryService.Initialize.
func (c *serviceDiscoveryServiceClient) Initialize(ctx context.Context, req *connect.Request[v1.InitializeRequest]) (*connect.Response[v1.InitializeResponse], error) {
	return c.initialize.CallUnary(ctx, req)
}

// Synchronize calls core.registry.service_discovery.v1.ServiceDiscoveryService.Synchronize.
func (c *serviceDiscoveryServiceClient) Synchronize(ctx context.Context) *connect.ClientStreamForClient[v1.ClientDetails, v1.Empty] {
	return c.synchronize.CallClientStream(ctx)
}

// Finalize calls core.registry.service_discovery.v1.ServiceDiscoveryService.Finalize.
func (c *serviceDiscoveryServiceClient) Finalize(ctx context.Context, req *connect.Request[v1.FinalizeRequest]) (*connect.Response[v1.FinalizeResponse], error) {
	return c.finalize.CallUnary(ctx, req)
}

// ReportHealth calls core.registry.service_discovery.v1.ServiceDiscoveryService.ReportHealth.
func (c *serviceDiscoveryServiceClient) ReportHealth(ctx context.Context, req *connect.Request[v1.ReportHealthRequest]) (*connect.Response[v1.ReportHealthResponse], error) {
	return c.reportHealth.CallUnary(ctx, req)
}

// Query calls core.registry.service_discovery.v1.ServiceDiscoveryService.Query.
func (c *serviceDiscoveryServiceClient) Query(ctx context.Context, req *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// ServiceDiscoveryServiceHandler is an implementation of the
// core.registry.service_discovery.v1.ServiceDiscoveryService service.
type ServiceDiscoveryServiceHandler interface {
	// Initialize the registeration of the process to the registry
	Initialize(context.Context, *connect.Request[v1.InitializeRequest]) (*connect.Response[v1.InitializeResponse], error)
	// synchronize the client state with the registry
	Synchronize(context.Context, *connect.ClientStream[v1.ClientDetails]) (*connect.Response[v1.Empty], error)
	// Gracefully shutdown and `Finalize` the connection of the process to the registry
	Finalize(context.Context, *connect.Request[v1.FinalizeRequest]) (*connect.Response[v1.FinalizeResponse], error)
	// Let a follower draft node report health information on the processes it's responsible for checking the health status of
	ReportHealth(context.Context, *connect.Request[v1.ReportHealthRequest]) (*connect.Response[v1.ReportHealthResponse], error)
	// Query the registry
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewServiceDiscoveryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceDiscoveryServiceHandler(svc ServiceDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceDiscoveryServiceInitializeHandler := connect.NewUnaryHandler(
		ServiceDiscoveryServiceInitializeProcedure,
		svc.Initialize,
		connect.WithSchema(serviceDiscoveryServiceInitializeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDiscoveryServiceSynchronizeHandler := connect.NewClientStreamHandler(
		ServiceDiscoveryServiceSynchronizeProcedure,
		svc.Synchronize,
		connect.WithSchema(serviceDiscoveryServiceSynchronizeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDiscoveryServiceFinalizeHandler := connect.NewUnaryHandler(
		ServiceDiscoveryServiceFinalizeProcedure,
		svc.Finalize,
		connect.WithSchema(serviceDiscoveryServiceFinalizeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDiscoveryServiceReportHealthHandler := connect.NewUnaryHandler(
		ServiceDiscoveryServiceReportHealthProcedure,
		svc.ReportHealth,
		connect.WithSchema(serviceDiscoveryServiceReportHealthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDiscoveryServiceQueryHandler := connect.NewUnaryHandler(
		ServiceDiscoveryServiceQueryProcedure,
		svc.Query,
		connect.WithSchema(serviceDiscoveryServiceQueryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.registry.service_discovery.v1.ServiceDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceDiscoveryServiceInitializeProcedure:
			serviceDiscoveryServiceInitializeHandler.ServeHTTP(w, r)
		case ServiceDiscoveryServiceSynchronizeProcedure:
			serviceDiscoveryServiceSynchronizeHandler.ServeHTTP(w, r)
		case ServiceDiscoveryServiceFinalizeProcedure:
			serviceDiscoveryServiceFinalizeHandler.ServeHTTP(w, r)
		case ServiceDiscoveryServiceReportHealthProcedure:
			serviceDiscoveryServiceReportHealthHandler.ServeHTTP(w, r)
		case ServiceDiscoveryServiceQueryProcedure:
			serviceDiscoveryServiceQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceDiscoveryServiceHandler struct{}

func (UnimplementedServiceDiscoveryServiceHandler) Initialize(context.Context, *connect.Request[v1.InitializeRequest]) (*connect.Response[v1.InitializeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.service_discovery.v1.ServiceDiscoveryService.Initialize is not implemented"))
}

func (UnimplementedServiceDiscoveryServiceHandler) Synchronize(context.Context, *connect.ClientStream[v1.ClientDetails]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.service_discovery.v1.ServiceDiscoveryService.Synchronize is not implemented"))
}

func (UnimplementedServiceDiscoveryServiceHandler) Finalize(context.Context, *connect.Request[v1.FinalizeRequest]) (*connect.Response[v1.FinalizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.service_discovery.v1.ServiceDiscoveryService.Finalize is not implemented"))
}

func (UnimplementedServiceDiscoveryServiceHandler) ReportHealth(context.Context, *connect.Request[v1.ReportHealthRequest]) (*connect.Response[v1.ReportHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.service_discovery.v1.ServiceDiscoveryService.ReportHealth is not implemented"))
}

func (UnimplementedServiceDiscoveryServiceHandler) Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.service_discovery.v1.ServiceDiscoveryService.Query is not implemented"))
}
