// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/registry/service_discovery/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClientDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientDetailsMultiError, or
// nil if none found.
func (m *ClientDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	// no validation rules for RunningState

	// no validation rules for HealthState

	// no validation rules for ProcessKind

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientDetailsValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientDetailsValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientDetailsValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientDetailsValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientDetailsValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientDetailsValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AdvertiseAddress

	if len(errors) > 0 {
		return ClientDetailsMultiError(errors)
	}

	return nil
}

// ClientDetailsMultiError is an error wrapping multiple validation errors
// returned by ClientDetails.ValidateAll() if the designated constraints
// aren't met.
type ClientDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientDetailsMultiError) AllErrors() []error { return m }

// ClientDetailsValidationError is the validation error returned by
// ClientDetails.Validate if the designated constraints aren't met.
type ClientDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientDetailsValidationError) ErrorName() string { return "ClientDetailsValidationError" }

// Error satisfies the builtin error interface
func (e ClientDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientDetailsValidationError{}

// Validate checks the field values on ClusterDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterDetailsMultiError,
// or nil if none found.
func (m *ClusterDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterDetailsValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterDetailsValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterDetailsValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterDetailsMultiError(errors)
	}

	return nil
}

// ClusterDetailsMultiError is an error wrapping multiple validation errors
// returned by ClusterDetails.ValidateAll() if the designated constraints
// aren't met.
type ClusterDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterDetailsMultiError) AllErrors() []error { return m }

// ClusterDetailsValidationError is the validation error returned by
// ClusterDetails.Validate if the designated constraints aren't met.
type ClusterDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterDetailsValidationError) ErrorName() string { return "ClusterDetailsValidationError" }

// Error satisfies the builtin error interface
func (e ClusterDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterDetailsValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for LeadershipStatus

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on InitializeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InitializeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitializeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitializeRequestMultiError, or nil if none found.
func (m *InitializeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitializeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Nonce

	if len(errors) > 0 {
		return InitializeRequestMultiError(errors)
	}

	return nil
}

// InitializeRequestMultiError is an error wrapping multiple validation errors
// returned by InitializeRequest.ValidateAll() if the designated constraints
// aren't met.
type InitializeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitializeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitializeRequestMultiError) AllErrors() []error { return m }

// InitializeRequestValidationError is the validation error returned by
// InitializeRequest.Validate if the designated constraints aren't met.
type InitializeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitializeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitializeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitializeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitializeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitializeRequestValidationError) ErrorName() string {
	return "InitializeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitializeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitializeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitializeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitializeRequestValidationError{}

// Validate checks the field values on InitializeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitializeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitializeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitializeResponseMultiError, or nil if none found.
func (m *InitializeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitializeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcessIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitializeResponseValidationError{
					field:  "ProcessIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitializeResponseValidationError{
					field:  "ProcessIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitializeResponseValidationError{
				field:  "ProcessIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitializeResponseValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitializeResponseValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitializeResponseValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitializeResponseMultiError(errors)
	}

	return nil
}

// InitializeResponseMultiError is an error wrapping multiple validation errors
// returned by InitializeResponse.ValidateAll() if the designated constraints
// aren't met.
type InitializeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitializeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitializeResponseMultiError) AllErrors() []error { return m }

// InitializeResponseValidationError is the validation error returned by
// InitializeResponse.Validate if the designated constraints aren't met.
type InitializeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitializeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitializeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitializeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitializeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitializeResponseValidationError) ErrorName() string {
	return "InitializeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitializeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitializeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitializeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitializeResponseValidationError{}

// Validate checks the field values on QueryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryRequestMultiError, or
// nil if none found.
func (m *QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryRequestMultiError(errors)
	}

	return nil
}

// QueryRequestMultiError is an error wrapping multiple validation errors
// returned by QueryRequest.ValidateAll() if the designated constraints aren't met.
type QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRequestMultiError) AllErrors() []error { return m }

// QueryRequestValidationError is the validation error returned by
// QueryRequest.Validate if the designated constraints aren't met.
type QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRequestValidationError) ErrorName() string { return "QueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRequestValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Attribute.(type) {
	case *Filter_Id:
		if v == nil {
			err := FilterValidationError{
				field:  "Attribute",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Id
	case *Filter_Group:
		if v == nil {
			err := FilterValidationError{
				field:  "Attribute",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Group
	case *Filter_All:
		if v == nil {
			err := FilterValidationError{
				field:  "Attribute",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for All
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on QueryResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryResponseMultiError, or
// nil if none found.
func (m *QueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, QueryResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, QueryResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return QueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return QueryResponseMultiError(errors)
	}

	return nil
}

// QueryResponseMultiError is an error wrapping multiple validation errors
// returned by QueryResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResponseMultiError) AllErrors() []error { return m }

// QueryResponseValidationError is the validation error returned by
// QueryResponse.Validate if the designated constraints aren't met.
type QueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResponseValidationError) ErrorName() string { return "QueryResponseValidationError" }

// Error satisfies the builtin error interface
func (e QueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResponseValidationError{}

// Validate checks the field values on FinalizeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FinalizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinalizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinalizeRequestMultiError, or nil if none found.
func (m *FinalizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FinalizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	if len(errors) > 0 {
		return FinalizeRequestMultiError(errors)
	}

	return nil
}

// FinalizeRequestMultiError is an error wrapping multiple validation errors
// returned by FinalizeRequest.ValidateAll() if the designated constraints
// aren't met.
type FinalizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinalizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinalizeRequestMultiError) AllErrors() []error { return m }

// FinalizeRequestValidationError is the validation error returned by
// FinalizeRequest.Validate if the designated constraints aren't met.
type FinalizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinalizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinalizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinalizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinalizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinalizeRequestValidationError) ErrorName() string { return "FinalizeRequestValidationError" }

// Error satisfies the builtin error interface
func (e FinalizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinalizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinalizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinalizeRequestValidationError{}

// Validate checks the field values on FinalizeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FinalizeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinalizeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinalizeResponseMultiError, or nil if none found.
func (m *FinalizeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FinalizeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	if len(errors) > 0 {
		return FinalizeResponseMultiError(errors)
	}

	return nil
}

// FinalizeResponseMultiError is an error wrapping multiple validation errors
// returned by FinalizeResponse.ValidateAll() if the designated constraints
// aren't met.
type FinalizeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinalizeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinalizeResponseMultiError) AllErrors() []error { return m }

// FinalizeResponseValidationError is the validation error returned by
// FinalizeResponse.Validate if the designated constraints aren't met.
type FinalizeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinalizeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinalizeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinalizeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinalizeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinalizeResponseValidationError) ErrorName() string { return "FinalizeResponseValidationError" }

// Error satisfies the builtin error interface
func (e FinalizeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinalizeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinalizeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinalizeResponseValidationError{}

// Validate checks the field values on ReportHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportHealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportHealthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportHealthRequestMultiError, or nil if none found.
func (m *ReportHealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportHealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportHealthRequestMultiError(errors)
	}

	return nil
}

// ReportHealthRequestMultiError is an error wrapping multiple validation
// errors returned by ReportHealthRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportHealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportHealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportHealthRequestMultiError) AllErrors() []error { return m }

// ReportHealthRequestValidationError is the validation error returned by
// ReportHealthRequest.Validate if the designated constraints aren't met.
type ReportHealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportHealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportHealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportHealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportHealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportHealthRequestValidationError) ErrorName() string {
	return "ReportHealthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportHealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportHealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportHealthRequestValidationError{}

// Validate checks the field values on ReportHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportHealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportHealthResponseMultiError, or nil if none found.
func (m *ReportHealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportHealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportHealthResponseMultiError(errors)
	}

	return nil
}

// ReportHealthResponseMultiError is an error wrapping multiple validation
// errors returned by ReportHealthResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportHealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportHealthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportHealthResponseMultiError) AllErrors() []error { return m }

// ReportHealthResponseValidationError is the validation error returned by
// ReportHealthResponse.Validate if the designated constraints aren't met.
type ReportHealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportHealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportHealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportHealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportHealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportHealthResponseValidationError) ErrorName() string {
	return "ReportHealthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportHealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportHealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportHealthResponseValidationError{}
