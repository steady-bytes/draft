// @generated by protoc-gen-connect-query v1.1.3 with parameter "target=ts"
// @generated from file core/registry/key_value/v1/service.proto (package core.registry.key_value.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { DeleteRequest, DeleteResponse, GetRequest, GetResponse, ListRequest, ListResponse, SetRequest, SetResponse } from "./service_pb.js";

/**
 * SET - A key/val pair
 *
 * @generated from rpc core.registry.key_value.v1.KeyValueService.Set
 */
export const set = {
  localName: "set",
  name: "Set",
  kind: MethodKind.Unary,
  I: SetRequest,
  O: SetResponse,
  service: {
    typeName: "core.registry.key_value.v1.KeyValueService"
  }
} as const;

/**
 * GET - A key/val pair
 *
 * @generated from rpc core.registry.key_value.v1.KeyValueService.Get
 */
export const get = {
  localName: "get",
  name: "Get",
  kind: MethodKind.Unary,
  I: GetRequest,
  O: GetResponse,
  service: {
    typeName: "core.registry.key_value.v1.KeyValueService"
  }
} as const;

/**
 * DELETE - remove a key, and it's associated value
 *
 * @generated from rpc core.registry.key_value.v1.KeyValueService.Delete
 */
export const delete$ = {
  localName: "delete",
  name: "Delete",
  kind: MethodKind.Unary,
  I: DeleteRequest,
  O: DeleteResponse,
  service: {
    typeName: "core.registry.key_value.v1.KeyValueService"
  }
} as const;

/**
 * List accepts a type to search the key_value store for all keys
 * matching that type, if any are found they will all be returned
 * as a map.
 *
 * @generated from rpc core.registry.key_value.v1.KeyValueService.List
 */
export const list = {
  localName: "list",
  name: "List",
  kind: MethodKind.Unary,
  I: ListRequest,
  O: ListResponse,
  service: {
    typeName: "core.registry.key_value.v1.KeyValueService"
  }
} as const;
