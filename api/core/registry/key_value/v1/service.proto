syntax = "proto3";

package core.registry.key_value.v1;

option go_package = "github.com/steady-bytes/draft/api/core/registry/key_value/v1";

import "google/protobuf/any.proto";

service KeyValueService {
    // SET - A key/val pair
    rpc Set(SetRequest) returns (SetResponse) {}
    // GET - A key/val pair
    rpc Get(GetRequest) returns (GetResponse) {}
    // DELETE - remove a key, and it's associated value
    rpc Delete(DeleteRequest) returns (DeleteResponse) {}
    // At this point I'm not sure how this is gonna work with the FSM, BadgerDB
    // I'm thinking we will have a way to trigger some type of change/updated event
    // on a channel then push the new configuration down to the watchers.
    // rpc Watch() returns () {}

    // List accepts a type to search the key_value store for all keys
    // matching that type, if any are found they will all be returned
    // as a map.
    rpc List(ListRequest) returns (ListResponse) {}
}

message SetRequest {
    string key = 1;
    google.protobuf.Any value = 2;
}

message SetResponse {
    string key = 1;
}

message GetRequest {
    string key = 1;
    google.protobuf.Any value = 2;
}

message GetResponse {
    google.protobuf.Any value = 1;
}

message DeleteRequest {
    string key = 1;
}

message DeleteResponse {
    string key = 1;
}

message ListRequest {
    google.protobuf.Any value = 1;
}

message ListResponse {
    map<string, google.protobuf.Any> values = 2;
}