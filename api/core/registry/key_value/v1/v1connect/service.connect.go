// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/registry/key_value/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/steady-bytes/draft/api/core/registry/key_value/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KeyValueServiceName is the fully-qualified name of the KeyValueService service.
	KeyValueServiceName = "core.registry.key_value.v1.KeyValueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeyValueServiceSetProcedure is the fully-qualified name of the KeyValueService's Set RPC.
	KeyValueServiceSetProcedure = "/core.registry.key_value.v1.KeyValueService/Set"
	// KeyValueServiceGetProcedure is the fully-qualified name of the KeyValueService's Get RPC.
	KeyValueServiceGetProcedure = "/core.registry.key_value.v1.KeyValueService/Get"
	// KeyValueServiceDeleteProcedure is the fully-qualified name of the KeyValueService's Delete RPC.
	KeyValueServiceDeleteProcedure = "/core.registry.key_value.v1.KeyValueService/Delete"
	// KeyValueServiceListProcedure is the fully-qualified name of the KeyValueService's List RPC.
	KeyValueServiceListProcedure = "/core.registry.key_value.v1.KeyValueService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	keyValueServiceServiceDescriptor      = v1.File_core_registry_key_value_v1_service_proto.Services().ByName("KeyValueService")
	keyValueServiceSetMethodDescriptor    = keyValueServiceServiceDescriptor.Methods().ByName("Set")
	keyValueServiceGetMethodDescriptor    = keyValueServiceServiceDescriptor.Methods().ByName("Get")
	keyValueServiceDeleteMethodDescriptor = keyValueServiceServiceDescriptor.Methods().ByName("Delete")
	keyValueServiceListMethodDescriptor   = keyValueServiceServiceDescriptor.Methods().ByName("List")
)

// KeyValueServiceClient is a client for the core.registry.key_value.v1.KeyValueService service.
type KeyValueServiceClient interface {
	// SET - A key/val pair
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	// GET - A key/val pair
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// DELETE - remove a key, and it's associated value
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	// List accepts a type to search the key_value store for all keys
	// matching that type, if any are found they will all be returned
	// as a map.
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
}

// NewKeyValueServiceClient constructs a client for the core.registry.key_value.v1.KeyValueService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeyValueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KeyValueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keyValueServiceClient{
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+KeyValueServiceSetProcedure,
			connect.WithSchema(keyValueServiceSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+KeyValueServiceGetProcedure,
			connect.WithSchema(keyValueServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+KeyValueServiceDeleteProcedure,
			connect.WithSchema(keyValueServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+KeyValueServiceListProcedure,
			connect.WithSchema(keyValueServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// keyValueServiceClient implements KeyValueServiceClient.
type keyValueServiceClient struct {
	set    *connect.Client[v1.SetRequest, v1.SetResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
}

// Set calls core.registry.key_value.v1.KeyValueService.Set.
func (c *keyValueServiceClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Get calls core.registry.key_value.v1.KeyValueService.Get.
func (c *keyValueServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls core.registry.key_value.v1.KeyValueService.Delete.
func (c *keyValueServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls core.registry.key_value.v1.KeyValueService.List.
func (c *keyValueServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// KeyValueServiceHandler is an implementation of the core.registry.key_value.v1.KeyValueService
// service.
type KeyValueServiceHandler interface {
	// SET - A key/val pair
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	// GET - A key/val pair
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// DELETE - remove a key, and it's associated value
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	// List accepts a type to search the key_value store for all keys
	// matching that type, if any are found they will all be returned
	// as a map.
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
}

// NewKeyValueServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeyValueServiceHandler(svc KeyValueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	keyValueServiceSetHandler := connect.NewUnaryHandler(
		KeyValueServiceSetProcedure,
		svc.Set,
		connect.WithSchema(keyValueServiceSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keyValueServiceGetHandler := connect.NewUnaryHandler(
		KeyValueServiceGetProcedure,
		svc.Get,
		connect.WithSchema(keyValueServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keyValueServiceDeleteHandler := connect.NewUnaryHandler(
		KeyValueServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(keyValueServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keyValueServiceListHandler := connect.NewUnaryHandler(
		KeyValueServiceListProcedure,
		svc.List,
		connect.WithSchema(keyValueServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.registry.key_value.v1.KeyValueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KeyValueServiceSetProcedure:
			keyValueServiceSetHandler.ServeHTTP(w, r)
		case KeyValueServiceGetProcedure:
			keyValueServiceGetHandler.ServeHTTP(w, r)
		case KeyValueServiceDeleteProcedure:
			keyValueServiceDeleteHandler.ServeHTTP(w, r)
		case KeyValueServiceListProcedure:
			keyValueServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKeyValueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeyValueServiceHandler struct{}

func (UnimplementedKeyValueServiceHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.key_value.v1.KeyValueService.Set is not implemented"))
}

func (UnimplementedKeyValueServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.key_value.v1.KeyValueService.Get is not implemented"))
}

func (UnimplementedKeyValueServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.key_value.v1.KeyValueService.Delete is not implemented"))
}

func (UnimplementedKeyValueServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.registry.key_value.v1.KeyValueService.List is not implemented"))
}
