// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/registry/key_value/v1/data_definition_lang.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _data_definition_lang_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ID with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *ID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IDMultiError, or nil if none found.
func (m *ID) ValidateAll() error {
	return m.validate(true)
}

func (m *ID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = IDValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IDMultiError(errors)
	}

	return nil
}

func (m *ID) _validateUuid(uuid string) error {
	if matched := _data_definition_lang_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IDMultiError is an error wrapping multiple validation errors returned by
// ID.ValidateAll() if the designated constraints aren't met.
type IDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDMultiError) AllErrors() []error { return m }

// IDValidationError is the validation error returned by ID.Validate if the
// designated constraints aren't met.
type IDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDValidationError) ErrorName() string { return "IDValidationError" }

// Error satisfies the builtin error interface
func (e IDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDValidationError{}

// Validate checks the field values on Statement with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Statement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Statement with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatementMultiError, or nil
// if none found.
func (m *Statement) ValidateAll() error {
	return m.validate(true)
}

func (m *Statement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKind()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatementValidationError{
					field:  "Kind",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatementValidationError{
					field:  "Kind",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKind()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatementValidationError{
				field:  "Kind",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operation

	switch v := m.Where.(type) {
	case *Statement_IsAll:
		if v == nil {
			err := StatementValidationError{
				field:  "Where",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IsAll
	case *Statement_Id:
		if v == nil {
			err := StatementValidationError{
				field:  "Where",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatementValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatementValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatementValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Statement_KeyVal:
		if v == nil {
			err := StatementValidationError{
				field:  "Where",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKeyVal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatementValidationError{
						field:  "KeyVal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatementValidationError{
						field:  "KeyVal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKeyVal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatementValidationError{
					field:  "KeyVal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StatementMultiError(errors)
	}

	return nil
}

// StatementMultiError is an error wrapping multiple validation errors returned
// by Statement.ValidateAll() if the designated constraints aren't met.
type StatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatementMultiError) AllErrors() []error { return m }

// StatementValidationError is the validation error returned by
// Statement.Validate if the designated constraints aren't met.
type StatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatementValidationError) ErrorName() string { return "StatementValidationError" }

// Error satisfies the builtin error interface
func (e StatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatementValidationError{}

// Validate checks the field values on Equal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Equal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Equal with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EqualMultiError, or nil if none found.
func (m *Equal) ValidateAll() error {
	return m.validate(true)
}

func (m *Equal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Match

	if len(errors) > 0 {
		return EqualMultiError(errors)
	}

	return nil
}

// EqualMultiError is an error wrapping multiple validation errors returned by
// Equal.ValidateAll() if the designated constraints aren't met.
type EqualMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EqualMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EqualMultiError) AllErrors() []error { return m }

// EqualValidationError is the validation error returned by Equal.Validate if
// the designated constraints aren't met.
type EqualValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EqualValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EqualValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EqualValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EqualValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EqualValidationError) ErrorName() string { return "EqualValidationError" }

// Error satisfies the builtin error interface
func (e EqualValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEqual.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EqualValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EqualValidationError{}
