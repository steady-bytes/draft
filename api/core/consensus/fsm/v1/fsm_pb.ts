// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file core/consensus/fsm/v1/fsm.proto (package core.consensus.fsm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum core.consensus.fsm.v1.Operation
 */
export enum Operation {
  /**
   * @generated from enum value: NULL_OPERATION = 0;
   */
  NULL_OPERATION = 0,

  /**
   * @generated from enum value: SET = 1;
   */
  SET = 1,

  /**
   * @generated from enum value: DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Operation)
proto3.util.setEnumType(Operation, "core.consensus.fsm.v1.Operation", [
  { no: 0, name: "NULL_OPERATION" },
  { no: 1, name: "SET" },
  { no: 2, name: "DELETE" },
]);

/**
 * @generated from message core.consensus.fsm.v1.CommandPayload
 */
export class CommandPayload extends Message<CommandPayload> {
  /**
   * @generated from field: core.consensus.fsm.v1.Operation operation = 1;
   */
  operation = Operation.NULL_OPERATION;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: google.protobuf.Any value = 3;
   */
  value?: Any;

  constructor(data?: PartialMessage<CommandPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.consensus.fsm.v1.CommandPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation", kind: "enum", T: proto3.getEnumType(Operation) },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandPayload {
    return new CommandPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandPayload {
    return new CommandPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandPayload {
    return new CommandPayload().fromJsonString(jsonString, options);
  }

  static equals(a: CommandPayload | PlainMessage<CommandPayload> | undefined, b: CommandPayload | PlainMessage<CommandPayload> | undefined): boolean {
    return proto3.util.equals(CommandPayload, a, b);
  }
}

